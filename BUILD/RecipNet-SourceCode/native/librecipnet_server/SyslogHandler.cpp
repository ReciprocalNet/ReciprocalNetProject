/*
 * Reciprocal Net project
 * @(#)SyslogHandler.cpp
 *
 * 14-Jul-2003: ekoperda wrote first draft
 *
 *
 * Native implementations of select methods of the Java class 
 * org.recipnet.site.core.util.SyslogHandler.  These implementations make use
 * of the POSIX functions openlog(), syslog() and closelog() to convey log
 * messages that originated within Java to the system logging facility 
 * (i.e. syslog, klog, or equivalent).
 */

/* Include header files from Java 2 SDK. */
#include <jni.h>

/* Include POSIX and standard header files. */
#include <string.h>
#include <syslog.h>

/* Include this file's method declarations, as generated by 'javah' utility. */
#include "org_recipnet_site_core_util_SyslogHandler.h"

/*
 * Define logging level constants.  These values match possible Level constants
 * defined on the Java class java.util.logging.Level.
 */
#define JAVA_LOGGING_LEVEL_SEVERE   1000
#define JAVA_LOGGING_LEVEL_WARNING  900
#define JAVA_LOGGING_LEVEL_INFO     800
#define JAVA_LOGGING_LEVEL_CONFIG   700
#define JAVA_LOGGING_LEVEL_FINE     500
#define JAVA_LOGGING_LEVEL_FINER    400
#define JAVA_LOGGING_LEVEL_FINEST   300


/*
 * Global variable that controls the identity tag preprended to each log
 * message.  Set by initLogger() and used by doLogger().
 */
char syslogTag[32];


/*
 * Helper function that converts a "facility" string into an integer value
 * suitable for use as the 'facility' argument to the POSIX function openlog().
 * Returns the default value LOG_USER for unrecognized "facility" strings.
 */
int decodeSyslogFacility(const char *facility) {
    if (strcmp(facility, "auth") == 0) {
        return LOG_AUTH;
    } else if (strcmp(facility, "authpriv") == 0) {
        return LOG_AUTHPRIV;
    } else if (strcmp(facility, "cron") == 0) {
        return LOG_CRON;
    } else if (strcmp(facility, "daemon") == 0) {
        return LOG_DAEMON;
    } else if (strcmp(facility, "ftp") == 0) {
        return LOG_FTP;
    } else if (strcmp(facility, "kern") == 0) {
        return LOG_KERN;
    } else if (strcmp(facility, "local0") == 0) {
        return LOG_LOCAL0;
    } else if (strcmp(facility, "local1") == 0) {
        return LOG_LOCAL1;
    } else if (strcmp(facility, "local2") == 0) {
        return LOG_LOCAL2;
    } else if (strcmp(facility, "local3") == 0) {
        return LOG_LOCAL3;
    } else if (strcmp(facility, "local4") == 0) {
        return LOG_LOCAL4;
    } else if (strcmp(facility, "local5") == 0) {
        return LOG_LOCAL5;
    } else if (strcmp(facility, "local6") == 0) {
        return LOG_LOCAL6;
    } else if (strcmp(facility, "local7") == 0) {
        return LOG_LOCAL7;
    } else if (strcmp(facility, "lpr") == 0) {
        return LOG_LPR;
    } else if (strcmp(facility, "mail") == 0) {
        return LOG_MAIL;
    } else if (strcmp(facility, "news") == 0) {
        return LOG_NEWS;
    } else if (strcmp(facility, "syslog") == 0) {
        return LOG_SYSLOG;
    } else if (strcmp(facility, "user") == 0) {
        return LOG_USER;
    } else if (strcmp(facility, "uucp") == 0) {
        return LOG_UUCP;
    } else {
        return LOG_USER;
    }
}


/*
 * Helper function that converts a Java "logging level value" (as defined by 
 * constants on the class java.util.logging.Level) into an integer value
 * suitable for use as the 'priority' argument to the POSIX function syslog().
 * The following table details the conversion:
 *
 *         Level.SEVERE in Java  ->  LOG_ERR in syslog
 *         Level.WARNING in Java ->  LOG_WARNING in syslog
 *         Level.INFO in Java    ->  LOG_INFO in syslog
 *         Level.CONFIG in Java  ->  LOG_DEBUG in syslog
 *         Level.FINE in Java    ->  LOG_DEBUG in syslog
 *         Level.FINER in Java   ->  LOG_DEBUG in syslog
 *         Level.FINEST in Java  ->  LOG_DEBUG in syslog
 *         any other value       ->  LOG_DEBUG in syslog
 *
 * The values LOG_ALERT, LOG_CRIT, LOG_EMERG, or LOG_NOTICE are never returned.
 */
int decodeJavaLoggingLevel(int level) {
    switch (level) {
        case JAVA_LOGGING_LEVEL_SEVERE:
            return LOG_ERR;
        case JAVA_LOGGING_LEVEL_WARNING:
            return LOG_WARNING;
        case JAVA_LOGGING_LEVEL_INFO:
            return LOG_INFO;
        case JAVA_LOGGING_LEVEL_CONFIG:
        case JAVA_LOGGING_LEVEL_FINE:
        case JAVA_LOGGING_LEVEL_FINER:
        case JAVA_LOGGING_LEVEL_FINEST:
        default:
	    return LOG_DEBUG;
    }
}


/*
 * Entry point for the SyslogHandler.initLogger() method.  Should be called
 * no more than once per process (i.e. once per Java VM). 
 */
JNIEXPORT void JNICALL 
        Java_org_recipnet_site_core_util_SyslogHandler_initLogger(JNIEnv* env,
        jobject ref, jstring tag, jstring facility) {
    // Read the tag argument and store the value in a global variable.  This is
    // necessary because subsequent calls to syslog() will assume that the
    // string's value remains constant.
    if (tag != NULL) {
        const char *tagChars = env->GetStringUTFChars(tag, 0);
        strncpy(syslogTag, tagChars, 32);
        env->ReleaseStringUTFChars(tag, tagChars);
    } else {
        strcpy(syslogTag, "");
    }

    // Read and interperet the facility argument, if specified.
    int facilityInt = LOG_USER;
    if (facility != NULL) {
        const char *facilityChars = env->GetStringUTFChars(facility, 0);
        facilityInt = decodeSyslogFacility(facilityChars);
	env->ReleaseStringUTFChars(facility, facilityChars);
    }

    // Open syslog for writing.
    openlog(syslogTag, LOG_CONS | LOG_NDELAY, facilityInt);
}


/*
 * Entry point for the SyslogHandler.doLogger() method.  Calls to this method
 * must be serialized -- no more than one thread may call it at any given time.
 * Must follow a call to initLogger() and precede any call to closeLogger().
 */
JNIEXPORT void JNICALL 
        Java_org_recipnet_site_core_util_SyslogHandler_doLogger(JNIEnv* env, 
        jobject ref, jint level, jstring message) {
    // Read the level argument and translate it to a priority value that syslog
    // understands.
    int priority = decodeJavaLoggingLevel(level);

    // Read the message argument.
    const char *messageChars = env->GetStringUTFChars(message, 0);

    // Log the string.
    syslog(priority, "%s", messageChars);

    // Clean up.
    env->ReleaseStringUTFChars(message, messageChars);
}


/*
 * Entry point for the SyslogHandler.closeLogger() method.  Should be called
 * no more than once per process (i.e. once per Java VM) and only after a prior
 * call to initLogger().
 */
JNIEXPORT void JNICALL 
        Java_org_recipnet_site_core_util_SyslogHandler_closeLogger(JNIEnv* env,
        jobject ref) {
    closelog();
}
