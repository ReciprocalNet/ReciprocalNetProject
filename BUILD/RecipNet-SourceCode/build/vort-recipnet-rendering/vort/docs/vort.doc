


VORT(3)                C LIBRARY FUNCTIONS                VORT(3)



NAME
     VORT - A Very Ordinary pixel library for the  Very  Ordinary
     Rendering Tool Kit.

SYNOPSIS
     #include <vort.h>


DESCRIPTION
     VORT (3) is a library of C routines for  manipulating  pixel
     files generated by the tools in VORT the tool kit.

  Functions For The Input/Output Of Images.
     openimage(name, flag)
          Open image file name according to flag. At  the  moment
          flag  must  be one of "r" or "w". If name is "-" stdin,
          or stdout are assumed. At the  moment  using  "-"  (ie.
          stdin or stdout) is broken. The routine returns NULL in
          the event of failure. Note: the library will now recog-
          nise  a  compressed  VORT  image  and read it correctly
          (thanks to Pavel Rozalski for adding this).

                    image *
                    openimage(name, flag)
                         char *name, *flag;


     readimage(fd)
          Reads in an image header from the file fd. If the  file
          is not a VORT file readimage fails silently and returns
          NULL, otherwise it returns the image  pointer.  If  the
          readimage  returns NULL fd will still point to the same
          position in the file as before.

                    image *
                    readimage(fd)
                         int  fd;


     makeimage(fd)
          Creates an image and returns  a  pointer  to  an  image
          structure.  The file descripter must be setup for writ-
          ing. Makeimage returns NULL upon error.

                    image *
                    makeimage(fd)
                         int  fd;


     closeimage(im)
          Close the image file referenced by im. Returns  EOF  in
          case of error.



VORT 2.2            Last change: 10 Jul 1993                    1






VORT(3)                C LIBRARY FUNCTIONS                VORT(3)



                    int
                    closeimage(im)
                         image *im;


     finishimage(im)
          Completes writing the image  but  DOES  NOT  close  the
          image file descripter.

                    int
                    finishimage(im)
                         image *im;


     writeheader(im)
          Write out the header details of im to  the  image  file
          pointed to by im.

                    writeheader(im)
                         image     *im;


     readmappedline(im, line)
          Read in a scanline directly from a  colourmapped  image
          file  as a string of indexes. The function returns 0 at
          end of file. Line is assumed to point to  enough  space
          to contain the scanline.

                    int
                    readmappedline(im, line)
                         image          *im;
                         unsigned char  *line;


     readrgbline(im, red, green, blue)
          Read in a scanline worth of the red,  green,  and  blue
          channels from im. Returns 0 at end of file. Red, green,
          and blue are assumed to point to enough space  to  con-
          tain the components of the scan line.

                    int
                    readrgbline(im, red, green, blue)
                         image          *im;
                         unsigned char  *red, *green, *blue;


     readrgbaline(im, red, green, blue, alpha)
          Read in a scanline worth of the red, green,  blue,  and
          alpha channels from im.  Returns 0 at end of file. Red,
          green, blue and alpha are assumed to  point  to  enough
          space to contain the components of the scan line.




VORT 2.2            Last change: 10 Jul 1993                    2






VORT(3)                C LIBRARY FUNCTIONS                VORT(3)



                    int
                    readrgbaline(im, red, green, blue, alpha)
                         image          *im;
                         unsigned char  *red, *green, *blue, *alpha;


     writemappedline(im, line)
          Writes a scanline directly  to  the  image  file  as  a
          string  of colourmap indexes. The function returns 0 in
          case of error.

                    int
                    writemappedline(im, line)
                         image          *im;
                         unsigned char  *line;


     writergbline(im, red, green, blue)
          Write out a scanline worth  of  red,  green,  and  blue
          channels  to the image file referenced by im. Returns 0
          in case of error.

                    int
                    writergbline(im, red, green, blue)
                         image          *im;
                         unsigned char  *red, *green, *blue;


     writergbaline(im, red, green, blue)
          Write out a scanline worth of  red,  green,  blue,  and
          alpha  channels  to  the  image  file referenced by im.
          Returns 0 in case of error.

                    int
                    writergbaline(im, red, green, blue, alpha)
                         image          *im;
                         unsigned char  *red, *green, *blue, *alpha;


     imagepos(im, x, y)
          Set the next pixel to be read to be the pixel at (x, y)
          in  pixel coordinates. Returns EOF in case of error. At
          the moment this call is only meaningful if x and y  are
          both 0.

                    int
                    imagepos(im, x, y)
                         image   *im;
                         int     x, y;






VORT 2.2            Last change: 10 Jul 1993                    3






VORT(3)                C LIBRARY FUNCTIONS                VORT(3)



  Functions For Changing Image Attributes.
     imagebufsize(size)
          Make the next call to openimage create an image  buffer
          of the size size bytes.

                    imagebufsize(size)
                         int  size;


     copyheader(a, b)
          Copy the header information in the  image  b  into  the
          image a.

                    copyheader(a, b)
                         image     *a, *b;


     setcmap(im, numc, red, green, blue)
          Set the colourmap for image  im.  Numc  represents  the
          number  of  colours  in the colour map, and red, green,
          and blue represent the red, green, and blue channels in
          the colour map.

                    setcmap(im, numc, red, green, blue)
                         image           *im;
                         int             numc;
                         unsigned char   *red, *green, *blue;


  Macros For Accessing Image Details.
     The following macros can be used to assign  and  set  header
     details in the image structure. Im is an image pointer.

     imagetype(im)
          The image's magic number. See pixfile (5) for  possible
          values.

     imagewidth(im)
          The image's width in pixels.

     imageheight(im)
          The image's height in pixels.

     imagedate(im)
          Creation date of the image.

     imagefile(im)
          Im's file descriptor.

     imagetitle(im)
          The title of the image. A character pointer.




VORT 2.2            Last change: 10 Jul 1993                    4






VORT(3)                C LIBRARY FUNCTIONS                VORT(3)



     titlelength(im)
          The length of the image's title.  Note:  this  includes
          the NULL at the end of the string.

     cmapsize(im)
          The size of the image's colourmap.

     redmap(im)
          The red channel of the colourmap. An unsigned character
          pointer.

     greenmap(im)
          The green channel of the colourmap. An unsigned charac-
          ter pointer.

     bluemap(im)
          The blue channel of the colourmap. An unsigned  charac-
          ter pointer.

  Macros which apply to image fragments.
     If  an  image  is  a  fragment   of   another   image   (see
     imagefragment(im)  below)  four  extra fields are set in the
     image header giving the x and y address of the top left hand
     corner  of  the  image relative to the image it is a part of
     and the width and size of the original image. The  following
     macros are used to get and set the information.

     imagexaddr(im)
          The x address of the image in the original image.

     imageyaddr(im)
          The y address of the image in the original image.

     imageorigwidth(im)
          The width of the original image this image is  a  frag-
          ment of.

     imageorigheight(im)
          The height of the original image this image is a  frag-
          ment of.

  Boolean Macros.
          The following macros return non-zero  if  the  condition  is
          true.
          Im is an image pointer.

     alphachannel(im)
          Does the image im have an alpha channel?

     rlecoded(im)
          Is the image im run length encoded?




VORT 2.2            Last change: 10 Jul 1993                    5






VORT(3)                C LIBRARY FUNCTIONS                VORT(3)



     colormapped(im)
          Is the image im colourmapped?

     imagefragment(im)
          Is the image im a fragment of another image?

SEE ALSO
     art(1),  disp(1),   movie(1),   vortinfo(1),   targ2vort(1),
     vort2ps(1), median(1), mulmcut(1), greyscale(1), gamma(1).














































VORT 2.2            Last change: 10 Jul 1993                    6



