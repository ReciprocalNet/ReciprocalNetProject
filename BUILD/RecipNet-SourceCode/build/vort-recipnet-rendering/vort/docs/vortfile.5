.TH VORTFILE 5  "5 December 1990" "VORT 2.2"
.UC 4
.SH NAME
VORTFILE \- A Very Ordinary raster file format library for the
Very Ordinary Rendering Tool Kit.
.SH SYNOPSIS
.B #include <vort.h>

.SH DESCRIPTION
.LP
The VORT file format is designed to be byte independant and easily
extendable. At the moment a VORT file can be recognised by the
string "VORT01" at the start of the file.
.LP
A VORT file is made up of objects. The first byte of an object
gives its type, the second byte gives the number of bytes in
the size of the object, the next n bytes give the object's size, and
the next size bytes gives the object. Values are written out
highbyte first. Programmes can ignore unknown fields by reading the
size and skipping the object. The first object in a VORT file should
always be a directory.
.LP
At the moment the following object types are supported:
.nf
	V_DIRECTORY     0       /* directory */
	V_IMAGE         1       /* image */
	V_TEXT          2       /* text */
	V_COLORMAP      3       /* colourmap */
.fi
.SS The Directory Object.
.LP
Directories can be made up of simple objects or other directories. The
following types can be found in a directory:
.nf
	D_PARENT        0       /* address of parent directory */
	D_NULL          1       /* empty entry */
	D_OBJECT        2       /* address of object in directory */
.fi
.SS Image Objects.
.LP
The following types can be found in an image object. All values
are ints, except I_ADDR and I_COLORMAP.
.nf
	I_ADDR          0       /* address of image in file */
	I_IMWIDTH       1       /* image width in pixels */
	I_IMHEIGHT      2       /* image height in pixels */
	I_IMDEPTH       3       /* image depth in bits */
	I_RED           4       /* red channel present */
	I_GREEN         5       /* green channel present */
	I_BLUE          6       /* blue channel present */
	I_ALPHA         7       /* alpha channel present */
	I_BACKGND       8       /* background colour */
	I_DATE          9       /* creation date */
	I_COLORMAP      10      /* red, green, and blue channels
				in colourmap */
	I_RLE_CODED     11      /* image is run length encoded */
	I_XADDR         12      /* x coord of image if fragment */
	I_YADDR         13      /* y coord of image if fragment */
	I_ORIGWIDTH     14      /* width of whole image we are fragment of */
	I_ORIGHEIGHT    15      /* height of whole image we are fragment of */
.fi
.SS Text Objects.
.LP
The following types can be found in a text object. Characters are assumed
to be 8 bits.
.nf
	T_ADDR          0       /* address of text in file */
	T_LENGTH        1       /* length of text in characters */
.fi
.SS Colourmap Objects.
The following types can be found in a colourmap object:
.nf
	C_ADDR          0       /* size of map */
	C_SIZE          1       /* size of each channel */
	C_RED           2       /* red channel present */
	C_GREEN         3       /* green channel present */
	C_BLUE          4       /* blue channel present */
.fi
.SS Making extensions.
.LP
People wishing to add fields to the file format should get in touch
with echidna@ecr.mu.oz.au before doing so.
.SH "SEE ALSO"
.IR art (1),
.IR disp (1),
.IR movie (1),
.IR vortinfo (1),
.IR targ2vort (1),
.IR vort2ps (1),
.IR median (1),
.IR mulmcut (1),
.IR greyscale (1),
.IR vort (3),
.IR gamma (1).
