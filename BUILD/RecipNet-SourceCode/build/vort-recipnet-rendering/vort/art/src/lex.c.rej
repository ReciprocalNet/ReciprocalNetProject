--- art/src/lex.c	1999-10-13 08:14:36.000000000 -0400
+++ art/src/lex.c	1969-12-31 19:00:00.000000000 -0500
@@ -1,2659 +0,0 @@
-/* A lexical scanner generated by flex */
-
-/* Scanner skeleton version:
- * $Header: /usr/local/cvs/recipnet/native/vort-recipnet-rendering/vort-recipnet-rendering.patch,v 1.2 2006-11-18 22:46:59 jobollin Exp $
- */
-
-#define FLEX_SCANNER
-#define YY_FLEX_MAJOR_VERSION 2
-#define YY_FLEX_MINOR_VERSION 5
-
-#include <stdio.h>
-
-
-/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
-#ifdef c_plusplus
-#ifndef __cplusplus
-#define __cplusplus
-#endif
-#endif
-
-
-#ifdef __cplusplus
-
-#include <stdlib.h>
-#include <unistd.h>
-
-/* Use prototypes in function declarations. */
-#define YY_USE_PROTOS
-
-/* The "const" storage-class-modifier is valid. */
-#define YY_USE_CONST
-
-#else	/* ! __cplusplus */
-
-#if __STDC__
-
-#define YY_USE_PROTOS
-#define YY_USE_CONST
-
-#endif	/* __STDC__ */
-#endif	/* ! __cplusplus */
-
-#ifdef __TURBOC__
- #pragma warn -rch
- #pragma warn -use
-#include <io.h>
-#include <stdlib.h>
-#define YY_USE_CONST
-#define YY_USE_PROTOS
-#endif
-
-#ifdef YY_USE_CONST
-#define yyconst const
-#else
-#define yyconst
-#endif
-
-
-#ifdef YY_USE_PROTOS
-#define YY_PROTO(proto) proto
-#else
-#define YY_PROTO(proto) ()
-#endif
-
-/* Returned upon end-of-file. */
-#define YY_NULL 0
-
-/* Promotes a possibly negative, possibly signed char to an unsigned
- * integer for use as an array index.  If the signed char is negative,
- * we want to instead treat it as an 8-bit unsigned char, hence the
- * double cast.
- */
-#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
-
-/* Enter a start condition.  This macro really ought to take a parameter,
- * but we do it the disgusting crufty way forced on us by the ()-less
- * definition of BEGIN.
- */
-#define BEGIN yy_start = 1 + 2 *
-
-/* Translate the current start state into a value that can be later handed
- * to BEGIN to return to the state.  The YYSTATE alias is for lex
- * compatibility.
- */
-#define YY_START ((yy_start - 1) / 2)
-#define YYSTATE YY_START
-
-/* Action number for EOF rule of a given start state. */
-#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
-
-/* Special action meaning "start processing a new file". */
-#define YY_NEW_FILE yyrestart( yyin )
-
-#define YY_END_OF_BUFFER_CHAR 0
-
-/* Size of default input buffer. */
-#define YY_BUF_SIZE 16384
-
-typedef struct yy_buffer_state *YY_BUFFER_STATE;
-
-extern int yyleng;
-extern FILE *yyin, *yyout;
-
-#define EOB_ACT_CONTINUE_SCAN 0
-#define EOB_ACT_END_OF_FILE 1
-#define EOB_ACT_LAST_MATCH 2
-
-/* The funky do-while in the following #define is used to turn the definition
- * int a single C statement (which needs a semi-colon terminator).  This
- * avoids problems with code like:
- *
- * 	if ( condition_holds )
- *		yyless( 5 );
- *	else
- *		do_something_else();
- *
- * Prior to using the do-while the compiler would get upset at the
- * "else" because it interpreted the "if" statement as being all
- * done when it reached the ';' after the yyless() call.
- */
-
-/* Return all but the first 'n' matched characters back to the input stream. */
-
-#define yyless(n) \
-	do \
-		{ \
-		/* Undo effects of setting up yytext. */ \
-		*yy_cp = yy_hold_char; \
-		YY_RESTORE_YY_MORE_OFFSET \
-		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
-		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
-		} \
-	while ( 0 )
-
-#define unput(c) yyunput( c, yytext_ptr )
-
-/* The following is because we cannot portably get our hands on size_t
- * (without autoconf's help, which isn't available because we want
- * flex-generated scanners to compile on their own).
- */
-typedef unsigned int yy_size_t;
-
-
-struct yy_buffer_state
-	{
-	FILE *yy_input_file;
-
-	char *yy_ch_buf;		/* input buffer */
-	char *yy_buf_pos;		/* current position in input buffer */
-
-	/* Size of input buffer in bytes, not including room for EOB
-	 * characters.
-	 */
-	yy_size_t yy_buf_size;
-
-	/* Number of characters read into yy_ch_buf, not including EOB
-	 * characters.
-	 */
-	int yy_n_chars;
-
-	/* Whether we "own" the buffer - i.e., we know we created it,
-	 * and can realloc() it to grow it, and should free() it to
-	 * delete it.
-	 */
-	int yy_is_our_buffer;
-
-	/* Whether this is an "interactive" input source; if so, and
-	 * if we're using stdio for input, then we want to use getc()
-	 * instead of fread(), to make sure we stop fetching input after
-	 * each newline.
-	 */
-	int yy_is_interactive;
-
-	/* Whether we're considered to be at the beginning of a line.
-	 * If so, '^' rules will be active on the next match, otherwise
-	 * not.
-	 */
-	int yy_at_bol;
-
-	/* Whether to try to fill the input buffer when we reach the
-	 * end of it.
-	 */
-	int yy_fill_buffer;
-
-	int yy_buffer_status;
-#define YY_BUFFER_NEW 0
-#define YY_BUFFER_NORMAL 1
-	/* When an EOF's been seen but there's still some text to process
-	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
-	 * shouldn't try reading from the input source any more.  We might
-	 * still have a bunch of tokens to match, though, because of
-	 * possible backing-up.
-	 *
-	 * When we actually see the EOF, we change the status to "new"
-	 * (via yyrestart()), so that the user can continue scanning by
-	 * just pointing yyin at a new input file.
-	 */
-#define YY_BUFFER_EOF_PENDING 2
-	};
-
-static YY_BUFFER_STATE yy_current_buffer = 0;
-
-/* We provide macros for accessing buffer states in case in the
- * future we want to put the buffer states in a more general
- * "scanner state".
- */
-#define YY_CURRENT_BUFFER yy_current_buffer
-
-
-/* yy_hold_char holds the character lost when yytext is formed. */
-static char yy_hold_char;
-
-static int yy_n_chars;		/* number of characters read into yy_ch_buf */
-
-
-int yyleng;
-
-/* Points to current character in buffer. */
-static char *yy_c_buf_p = (char *) 0;
-static int yy_init = 1;		/* whether we need to initialize */
-static int yy_start = 0;	/* start state number */
-
-/* Flag which is used to allow yywrap()'s to do buffer switches
- * instead of setting up a fresh yyin.  A bit of a hack ...
- */
-static int yy_did_buffer_switch_on_eof;
-
-void yyrestart YY_PROTO(( FILE *input_file ));
-
-void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
-void yy_load_buffer_state YY_PROTO(( void ));
-YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
-void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
-void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
-void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
-#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )
-
-YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
-YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
-YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));
-
-static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
-static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
-static void yy_flex_free YY_PROTO(( void * ));
-
-#define yy_new_buffer yy_create_buffer
-
-#define yy_set_interactive(is_interactive) \
-	{ \
-	if ( ! yy_current_buffer ) \
-		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
-	yy_current_buffer->yy_is_interactive = is_interactive; \
-	}
-
-#define yy_set_bol(at_bol) \
-	{ \
-	if ( ! yy_current_buffer ) \
-		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
-	yy_current_buffer->yy_at_bol = at_bol; \
-	}
-
-#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)
-
-typedef unsigned char YY_CHAR;
-FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
-typedef int yy_state_type;
-extern char *yytext;
-#define yytext_ptr yytext
-
-static yy_state_type yy_get_previous_state YY_PROTO(( void ));
-static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
-static int yy_get_next_buffer YY_PROTO(( void ));
-static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));
-
-/* Done after the current pattern has been matched and before the
- * corresponding action - sets up yytext.
- */
-#define YY_DO_BEFORE_ACTION \
-	yytext_ptr = yy_bp; \
-	yyleng = (int) (yy_cp - yy_bp); \
-	yy_hold_char = *yy_cp; \
-	*yy_cp = '\0'; \
-	yy_c_buf_p = yy_cp;
-
-#define YY_NUM_RULES 132
-#define YY_END_OF_BUFFER 133
-static yyconst short int yy_accept[688] =
-    {   0,
-      110,  110,  133,  132,  129,  128,  124,  130,  132,  117,
-      127,  120,  121,  116,  113,  119,  114,  111,  115,  110,
-      122,  109,  118,  109,  109,  109,  109,  109,  109,  109,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-      109,  109,  109,  109,  125,  126,  123,  111,  112,  131,
-      111,  110,  109,  109,  109,  109,  109,  109,  109,  109,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-      109,  109,  109,  109,  109,  109,  109,   50,  109,  109,
-      109,  109,  109,  109,  109,  109,  109,  109,   64,  109,
-
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-      109,  109,  109,  109,  109,   95,  109,  109,  109,  109,
-      109,  112,  112,  109,  109,  109,  109,  109,  109,  109,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-      109,  109,  109,   44,  109,  109,  109,  109,  109,  109,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-       81,  109,  109,  109,  109,  109,  109,  109,   51,  109,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-      109,  109,  109,  105,  106,  109,  109,  109,  109,  109,
-      109,  109,  109,  109,  109,  109,  109,   38,  109,  109,
-
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-      109,  109,  109,  109,   39,  109,  109,  109,  109,  109,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-      109,  109,  109,  109,  109,  109,  109,  109,    2,  109,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  107,
-      108,  109,  109,  109,  109,   89,  109,  109,  109,  109,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-      109,  109,  109,   17,  109,  109,   70,  109,  109,  109,
-
-        5,  109,   84,  109,  109,   37,  109,  109,  109,  109,
-       55,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-      109,  109,  109,  109,   75,   76,   77,  109,  109,  109,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-      109,  109,  109,   43,  109,  109,  109,   16,  109,  109,
-      109,   67,  109,   83,  109,  109,  109,  109,  109,   93,
-      109,  109,  109,  109,   68,  109,  109,  109,  100,  109,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-      109,  109,  109,  109,  109,  109,  109,  109,   53,   54,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-
-      109,  109,  109,  109,  109,  109,  109,  109,  109,    1,
-      109,   94,  109,  109,  109,  109,  109,  109,   19,  109,
-      109,  109,  109,  103,  109,  109,  109,  109,   66,  109,
-      109,   65,  109,   92,  109,  109,  109,   12,  109,  109,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,   78,
-      109,  109,  109,  109,  109,   56,  109,  109,  109,  109,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-       15,  109,  109,   63,  109,  109,   47,  109,    9,   23,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,   73,
-      109,   74,   24,  109,  109,  109,  109,  109,  109,  109,
-
-       62,  109,  109,   99,  109,   22,  109,   80,  109,  109,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,   36,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-      109,  109,   82,  109,   40,  109,   90,  109,  109,    8,
-      109,  109,  109,  109,   79,   52,  109,  109,  109,    6,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-       34,  109,  109,   13,  109,  109,  109,  109,  109,   87,
-       88,  109,  109,  109,   30,   45,   69,  109,   61,   60,
-      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
-
-       98,  109,  109,  109,  109,  109,  109,  109,    7,   46,
-       91,  109,  109,  109,  109,  109,  109,   58,  109,   49,
-      101,  109,   85,  109,   41,  109,   25,  109,  109,  109,
-      109,  109,  109,   31,  109,  109,  109,   27,  109,  109,
-      109,   11,  109,  109,  109,   21,  109,   33,  109,   14,
-      109,  109,  109,   96,   26,   71,  102,    4,  109,  109,
-       29,  109,  109,   57,   18,  109,    3,  109,  109,   32,
-       35,  109,   42,   10,   28,   48,   97,   86,   20,   59,
-      109,  109,  104,  109,  109,   72,    0
-    } ;
-
-static yyconst int yy_ec[256] =
-    {   0,
-        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    2,    1,    4,    5,    6,    7,    1,    8,    9,
-       10,   11,   12,   13,   14,   15,   16,   17,   17,   17,
-       17,   17,   17,   17,   17,   17,   17,    1,    1,    1,
-       18,    1,    1,    1,   19,   19,   19,   19,   20,   19,
-       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
-       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
-        1,    1,    1,   21,   19,    1,   22,   23,   24,   25,
-
-       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
-       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
-       46,   47,   48,    1,   49,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1
-    } ;
-
-static yyconst int yy_meta[50] =
-    {   0,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    2,    2,    2,    1,    2,    2,
-        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
-        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
-        2,    2,    2,    2,    2,    2,    2,    1,    1
-    } ;
-
-static yyconst short int yy_base[689] =
-    {   0,
-        0,    0,  709,  710,  710,  710,  710,  710,  702,  710,
-      710,  710,  710,  710,  710,  710,  710,   33,  696,   37,
-      710,    0,  710,   32,   36,   37,   34,  668,   46,   52,
-       57,  670,  679,  667,   58,   45,   59,   63,   77,   82,
-       96,  665,   93,  679,  710,  710,  710,  110,   83,  710,
-      117,   99,    0,  660,  677,  661,  108,   68,  109,  675,
-       25,   30,  661,  665,  113,  666,  659,  653,  649,  657,
-      663,  660,  665,  649,  649,  654,  636,  652,  641,  639,
-      117,  113,  638,  107,  639,  643,  649,    0,  119,  634,
-      635,  129,  628,  636,  131,  130,  649,  647,    0,  643,
-
-      627,  133,  645,  619,  623,  622,  624,  639,  616,  621,
-      618,  621,  635,  617,  629,    0,  618,  614,  616,  612,
-      607,  147,  632,  612,  610,  617,  615,  611,  610,  612,
-      609,  143,  606,  604,  614,  613,  595,  594,  597,  606,
-      596,  594,  590,    0,  592,  602,  605,  593,  592,  597,
-      589,  138,   81,  597,  595,  592,  589,  579,  595,  584,
-        0,  589,  134,  592,  588,  569,  577,  571,  582,  582,
-      578,  569,  565,  564,  568,  576,  570,  570,  571,  558,
-      564,  570,  571,  572,  571,  570,  558,  564,  564,  562,
-      548,  560,  555,  559,  542,  556,  548,    0,  545,  556,
-
-      543,  544,  535,  536,  533,  547,  533,  530,  548,  543,
-      538,  541,  544,  143,    0,  525,  539,  538,  530,  529,
-      534,  142,  516,  531,  137,  521,  515,  525,  530,  512,
-      516,  526,  528,  523,  512,  517,  516,  137,    0,  521,
-      515,  518,  516,  500,  518,  500,  508,  495,  497,  512,
-      504,  511,  510,  509,  500,  490,  492,  485,  489,  499,
-      496,  490,  496,  150,  495,  483,  493,  496,  476,    0,
-        0,  475,  489,  488,  477,    0,  488,  485,  473,  479,
-      466,  467,  480,  465,  462,  462,  466,  475,  466,  472,
-      465,  460,  466,    0,  460,  453,    0,  460,  470,  452,
-
-        0,  460,  465,  448,  447,    0,  447,  459,  448,  453,
-      159,  443,  441,  458,  444,  437,  447,  449,  439,  450,
-      438,  439,  424,  437,    0,    0,    0,  433,  427,  441,
-      440,  435,  423,  433,  421,  438,  434,  437,  418,  424,
-      423,  409,  421,    0,  425,  411,  425,    0,  410,  421,
-      424,    0,  407,    0,  420,  421,  403,  407,  416,  414,
-      405,  395,  412,  390,    0,  393,  396,  405,    0,  158,
-      400,  386,  148,  386,  408,  399,  402,  386,  383,  384,
-      382,  393,  398,  385,  380,  383,  388,  387,    0,    0,
-      383,  391,  384,  391,  382,  376,  382,  379,  372,  380,
-
-      379,  364,  368,  367,  376,  375,  367,  372,  376,    0,
-      361,    0,  374,  362,  361,  367,  359,  350,    0,  363,
-      349,  362,  348,    0,  362,  356,  345,  342,    0,  343,
-      340,    0,  341,    0,  357,  338,  337,  337,  349,  344,
-      347,  336,  335,  348,  347,  342,  340,  339,  326,    0,
-      331,  330,  327,  331,  334,    0,  334,  336,  327,  314,
-      314,  321,  306,  305,  309,  320,  163,  312,  307,  306,
-        0,  310,  310,    0,  301,  307,    0,  155,    0,    0,
-      306,  311,  305,  304,  305,  311,  310,  310,  301,    0,
-      303,    0,    0,  310,  290,  308,  299,  298,  290,  304,
-
-        0,  301,  294,    0,  301,    0,  282,    0,  288,  281,
-      278,  279,  282,  286,  285,  287,  287,  284,  275,    0,
-      284,  269,  273,  272,  267,  269,  278,  277,  268,  275,
-      267,  273,    0,  272,    0,  262,    0,  266,  256,    0,
-      255,  159,  267,  264,    0,    0,  248,  247,  263,    0,
-      255,  250,  256,  260,  259,  247,  252,  246,  239,  232,
-      253,  247,  251,  241,  248,  247,  248,  228,  237,  239,
-        0,  227,  232,    0,  236,  237,  239,  233,  160,    0,
-        0,  236,  226,  235,    0,    0,    0,  233,    0,    0,
-      219,  224,  223,  229,  228,  216,  226,  222,  207,  219,
-
-        0,  213,  202,  222,  209,  218,  213,  206,    0,    0,
-        0,  206,  214,  213,  212,  204,  207,    0,  200,    0,
-        0,  211,    0,  194,    0,  191,    0,  187,  205,  203,
-      195,  194,  185,    0,  195,  198,  188,    0,  196,  195,
-      181,    0,  177,  183,  193,    0,  193,    0,  189,    0,
-      186,  171,  172,    0,    0,    0,    0,    0,  182,   47,
-        0,   62,   88,    0,  148,  160,    0,  157,  174,    0,
-        0,  164,    0,    0,    0,    0,    0,    0,    0,    0,
-      165,  177,    0,  172,  174,    0,  710,  208
-    } ;
-
-static yyconst short int yy_def[689] =
-    {   0,
-      687,    1,  687,  687,  687,  687,  687,  687,  687,  687,
-      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
-      687,  688,  687,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  687,  687,  687,  687,  687,  687,
-      687,  687,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  687,  687,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,    0,  687
-    } ;
-
-static yyconst short int yy_nxt[760] =
-    {   0,
-        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
-       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
-       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
-       22,   33,   34,   35,   36,   37,   38,   22,   39,   40,
-       41,   42,   43,   44,   22,   22,   22,   45,   46,   48,
-      134,   51,   49,   52,   54,   67,   55,   59,   49,  136,
-      135,   60,   63,   68,   56,   57,   58,   70,   61,   64,
-      675,  137,   65,   74,   62,   71,   66,   75,   77,   82,
-       85,   72,   78,   83,   73,   87,   86,   84,   91,  676,
-       76,   92,   93,   88,  122,  129,  122,   89,   95,  123,
-
-       90,   94,   96,   97,   98,  102,   99,  237,  130,  100,
-      103,  104,  101,   51,  238,   52,  117,  105,  118,  106,
-      677,  109,  107,  108,  110,  111,   48,  119,  120,   49,
-      127,  112,  131,   48,  113,   49,   49,  114,  140,  115,
-      159,  165,   49,  170,  128,  141,  142,  143,  132,  161,
-      174,  166,  160,  162,  187,  178,  181,  163,  122,  171,
-      122,  235,  247,  123,  175,  179,  182,  307,  215,  299,
-      300,  188,  216,  248,  249,  311,  180,  236,  312,  352,
-      308,  325,  326,  327,  443,  393,  448,  678,  531,  449,
-      444,  353,  394,  540,  445,  532,  541,  590,  623,  679,
-
-      591,  624,  680,  681,  682,  683,  684,  685,  686,   53,
-      674,  673,  672,  671,  670,  669,  668,  667,  666,  665,
-      664,  663,  662,  661,  660,  659,  658,  657,  656,  655,
-      654,  653,  623,  652,  651,  650,  649,  648,  647,  646,
-      645,  644,  643,  642,  641,  640,  639,  638,  637,  636,
-      635,  634,  633,  632,  631,  630,  629,  590,  628,  627,
-      626,  625,  622,  621,  620,  619,  618,  617,  616,  615,
-      614,  613,  612,  611,  610,  609,  608,  607,  606,  605,
-      604,  603,  602,  601,  600,  599,  598,  597,  596,  595,
-      594,  593,  592,  540,  589,  588,  587,  586,  585,  584,
-
-      583,  582,  581,  580,  579,  578,  577,  576,  575,  574,
-      573,  572,  571,  570,  569,  568,  567,  566,  565,  564,
-      563,  562,  561,  560,  559,  558,  557,  556,  555,  554,
-      553,  552,  551,  550,  549,  548,  547,  546,  545,  544,
-      543,  542,  539,  538,  537,  536,  535,  534,  533,  530,
-      529,  528,  527,  526,  525,  524,  523,  522,  521,  520,
-      519,  518,  517,  516,  448,  515,  514,  513,  512,  511,
-      510,  509,  508,  507,  506,  505,  504,  503,  502,  501,
-      500,  499,  498,  497,  496,  495,  494,  493,  492,  491,
-      490,  489,  488,  487,  486,  485,  484,  483,  482,  481,
-
-      480,  479,  478,  477,  476,  475,  474,  473,  472,  471,
-      470,  469,  468,  467,  466,  465,  464,  463,  462,  461,
-      460,  459,  458,  457,  456,  455,  454,  453,  452,  451,
-      450,  447,  446,  442,  441,  440,  439,  438,  437,  436,
-      435,  434,  433,  432,  431,  430,  429,  428,  427,  426,
-      425,  424,  423,  422,  421,  420,  419,  418,  417,  416,
-      415,  414,  413,  412,  411,  410,  409,  408,  407,  406,
-      405,  404,  403,  402,  401,  400,  399,  398,  397,  396,
-      395,  311,  392,  391,  390,  389,  388,  387,  386,  385,
-      384,  383,  382,  381,  380,  379,  378,  377,  376,  375,
-
-      374,  373,  372,  371,  370,  369,  368,  367,  366,  365,
-      364,  363,  362,  361,  360,  359,  358,  357,  356,  355,
-      354,  351,  350,  349,  348,  347,  346,  345,  344,  343,
-      342,  341,  340,  339,  338,  337,  336,  335,  334,  333,
-      332,  331,  330,  329,  328,  324,  323,  322,  321,  320,
-      319,  318,  317,  316,  315,  314,  313,  310,  309,  306,
-      305,  304,  303,  302,  301,  298,  297,  296,  295,  294,
-      293,  292,  291,  290,  289,  288,  287,  286,  285,  284,
-      283,  282,  281,  280,  279,  278,  277,  276,  275,  274,
-      273,  272,  271,  270,  269,  268,  267,  266,  265,  264,
-
-      263,  262,  261,  260,  259,  258,  257,  256,  255,  254,
-      253,  252,  251,  250,  246,  245,  244,  243,  242,  241,
-      240,  239,  234,  233,  232,  231,  230,  229,  228,  227,
-      226,  225,  224,  223,  222,  221,  220,  219,  218,  217,
-      214,  213,  212,  211,  210,  209,  208,  207,  123,  206,
-      205,  204,  203,  202,  201,  200,  199,  198,  197,  196,
-      195,  194,  193,  192,  191,  190,  189,  186,  185,  184,
-      183,  177,  176,  173,  172,  169,  168,  167,  164,  158,
-      157,  156,  155,  154,  153,  152,  151,  150,  149,  148,
-      147,  146,  145,  144,  139,  138,  133,  126,  125,  124,
-
-      121,  116,   81,   80,   79,   69,   50,   47,  687,    3,
-      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
-      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
-      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
-      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
-      687,  687,  687,  687,  687,  687,  687,  687,  687
-    } ;
-
-static yyconst short int yy_chk[760] =
-    {   0,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,   18,
-       61,   20,   18,   20,   24,   27,   24,   25,   18,   62,
-       61,   25,   26,   27,   24,   24,   24,   29,   25,   26,
-      660,   62,   26,   30,   25,   29,   26,   30,   31,   35,
-       36,   29,   31,   35,   29,   37,   36,   35,   38,  662,
-       30,   38,   38,   37,   49,   58,   49,   37,   39,   49,
-
-       37,   38,   39,   39,   39,   40,   39,  153,   58,   39,
-       40,   40,   39,   52,  153,   52,   43,   40,   43,   40,
-      663,   41,   40,   40,   41,   41,   48,   43,   43,   48,
-       57,   41,   59,   51,   41,   48,   51,   41,   65,   41,
-       81,   84,   51,   89,   57,   65,   65,   65,   59,   82,
-       92,   84,   81,   82,  102,   95,   96,   82,  122,   89,
-      122,  152,  163,  122,   92,   95,   96,  222,  132,  214,
-      214,  102,  132,  163,  163,  225,   95,  152,  225,  264,
-      222,  238,  238,  238,  370,  311,  373,  665,  467,  373,
-      370,  264,  311,  478,  370,  467,  478,  542,  579,  666,
-
-      542,  579,  668,  669,  672,  681,  682,  684,  685,  688,
-      659,  653,  652,  651,  649,  647,  645,  644,  643,  641,
-      640,  639,  637,  636,  635,  633,  632,  631,  630,  629,
-      628,  626,  624,  622,  619,  617,  616,  615,  614,  613,
-      612,  608,  607,  606,  605,  604,  603,  602,  600,  599,
-      598,  597,  596,  595,  594,  593,  592,  591,  588,  584,
-      583,  582,  578,  577,  576,  575,  573,  572,  570,  569,
-      568,  567,  566,  565,  564,  563,  562,  561,  560,  559,
-      558,  557,  556,  555,  554,  553,  552,  551,  549,  548,
-      547,  544,  543,  541,  539,  538,  536,  534,  532,  531,
-
-      530,  529,  528,  527,  526,  525,  524,  523,  522,  521,
-      519,  518,  517,  516,  515,  514,  513,  512,  511,  510,
-      509,  507,  505,  503,  502,  500,  499,  498,  497,  496,
-      495,  494,  491,  489,  488,  487,  486,  485,  484,  483,
-      482,  481,  476,  475,  473,  472,  470,  469,  468,  466,
-      465,  464,  463,  462,  461,  460,  459,  458,  457,  455,
-      454,  453,  452,  451,  449,  448,  447,  446,  445,  444,
-      443,  442,  441,  440,  439,  438,  437,  436,  435,  433,
-      431,  430,  428,  427,  426,  425,  423,  422,  421,  420,
-      418,  417,  416,  415,  414,  413,  411,  409,  408,  407,
-
-      406,  405,  404,  403,  402,  401,  400,  399,  398,  397,
-      396,  395,  394,  393,  392,  391,  388,  387,  386,  385,
-      384,  383,  382,  381,  380,  379,  378,  377,  376,  375,
-      374,  372,  371,  368,  367,  366,  364,  363,  362,  361,
-      360,  359,  358,  357,  356,  355,  353,  351,  350,  349,
-      347,  346,  345,  343,  342,  341,  340,  339,  338,  337,
-      336,  335,  334,  333,  332,  331,  330,  329,  328,  324,
-      323,  322,  321,  320,  319,  318,  317,  316,  315,  314,
-      313,  312,  310,  309,  308,  307,  305,  304,  303,  302,
-      300,  299,  298,  296,  295,  293,  292,  291,  290,  289,
-
-      288,  287,  286,  285,  284,  283,  282,  281,  280,  279,
-      278,  277,  275,  274,  273,  272,  269,  268,  267,  266,
-      265,  263,  262,  261,  260,  259,  258,  257,  256,  255,
-      254,  253,  252,  251,  250,  249,  248,  247,  246,  245,
-      244,  243,  242,  241,  240,  237,  236,  235,  234,  233,
-      232,  231,  230,  229,  228,  227,  226,  224,  223,  221,
-      220,  219,  218,  217,  216,  213,  212,  211,  210,  209,
-      208,  207,  206,  205,  204,  203,  202,  201,  200,  199,
-      197,  196,  195,  194,  193,  192,  191,  190,  189,  188,
-      187,  186,  185,  184,  183,  182,  181,  180,  179,  178,
-
-      177,  176,  175,  174,  173,  172,  171,  170,  169,  168,
-      167,  166,  165,  164,  162,  160,  159,  158,  157,  156,
-      155,  154,  151,  150,  149,  148,  147,  146,  145,  143,
-      142,  141,  140,  139,  138,  137,  136,  135,  134,  133,
-      131,  130,  129,  128,  127,  126,  125,  124,  123,  121,
-      120,  119,  118,  117,  115,  114,  113,  112,  111,  110,
-      109,  108,  107,  106,  105,  104,  103,  101,  100,   98,
-       97,   94,   93,   91,   90,   87,   86,   85,   83,   80,
-       79,   78,   77,   76,   75,   74,   73,   72,   71,   70,
-       69,   68,   67,   66,   64,   63,   60,   56,   55,   54,
-
-       44,   42,   34,   33,   32,   28,   19,    9,    3,  687,
-      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
-      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
-      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
-      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
-      687,  687,  687,  687,  687,  687,  687,  687,  687
-    } ;
-
-static yy_state_type yy_last_accepting_state;
-static char *yy_last_accepting_cpos;
-
-/* The intent behind this definition is that it'll catch
- * any uses of REJECT which flex missed.
- */
-#define REJECT reject_used_but_not_detected
-#define yymore() yymore_used_but_not_detected
-#define YY_MORE_ADJ 0
-#define YY_RESTORE_YY_MORE_OFFSET
-char *yytext;
-#line 1 "lex.l"
-#define INITIAL 0
-#line 2 "lex.l"
-#include <math.h>
-#include "art.h"
-#include "objs.h"
-#include "gram.h"
-
-extern int	linecount;
-
-extern char	currentfile[];
-
-extern symbol	*lookup();
-
-extern double	atof();
-
-
-/* Macros after this point can all be overridden by user definitions in
- * section 1.
- */
-
-#ifndef YY_SKIP_YYWRAP
-#ifdef __cplusplus
-extern "C" int yywrap YY_PROTO(( void ));
-#else
-extern int yywrap YY_PROTO(( void ));
-#endif
-#endif
-
-#ifndef YY_NO_UNPUT
-static void yyunput YY_PROTO(( int c, char *buf_ptr ));
-#endif
-
-#ifndef yytext_ptr
-static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
-#endif
-
-#ifdef YY_NEED_STRLEN
-static int yy_flex_strlen YY_PROTO(( yyconst char * ));
-#endif
-
-#ifndef YY_NO_INPUT
-#ifdef __cplusplus
-static int yyinput YY_PROTO(( void ));
-#else
-static int input YY_PROTO(( void ));
-#endif
-#endif
-
-#if YY_STACK_USED
-static int yy_start_stack_ptr = 0;
-static int yy_start_stack_depth = 0;
-static int *yy_start_stack = 0;
-#ifndef YY_NO_PUSH_STATE
-static void yy_push_state YY_PROTO(( int new_state ));
-#endif
-#ifndef YY_NO_POP_STATE
-static void yy_pop_state YY_PROTO(( void ));
-#endif
-#ifndef YY_NO_TOP_STATE
-static int yy_top_state YY_PROTO(( void ));
-#endif
-
-#else
-#define YY_NO_PUSH_STATE 1
-#define YY_NO_POP_STATE 1
-#define YY_NO_TOP_STATE 1
-#endif
-
-#ifdef YY_MALLOC_DECL
-YY_MALLOC_DECL
-#else
-#if __STDC__
-#ifndef __cplusplus
-#include <stdlib.h>
-#endif
-#else
-/* Just try to get by without declaring the routines.  This will fail
- * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
- * or sizeof(void*) != sizeof(int).
- */
-#endif
-#endif
-
-/* Amount of stuff to slurp up with each read. */
-#ifndef YY_READ_BUF_SIZE
-#define YY_READ_BUF_SIZE 8192
-#endif
-
-/* Copy whatever the last rule matched to the standard output. */
-
-#ifndef ECHO
-/* This used to be an fputs(), but since the string might contain NUL's,
- * we now use fwrite().
- */
-#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
-#endif
-
-/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
- * is returned in "result".
- */
-#ifndef YY_INPUT
-#define YY_INPUT(buf,result,max_size) \
-	if ( yy_current_buffer->yy_is_interactive ) \
-		{ \
-		int c = '*', n; \
-		for ( n = 0; n < max_size && \
-			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
-			buf[n] = (char) c; \
-		if ( c == '\n' ) \
-			buf[n++] = (char) c; \
-		if ( c == EOF && ferror( yyin ) ) \
-			YY_FATAL_ERROR( "input in flex scanner failed" ); \
-		result = n; \
-		} \
-	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
-		  && ferror( yyin ) ) \
-		YY_FATAL_ERROR( "input in flex scanner failed" );
-#endif
-
-/* No semi-colon after return; correct usage is to write "yyterminate();" -
- * we don't want an extra ';' after the "return" because that will cause
- * some compilers to complain about unreachable statements.
- */
-#ifndef yyterminate
-#define yyterminate() return YY_NULL
-#endif
-
-/* Number of entries by which start-condition stack grows. */
-#ifndef YY_START_STACK_INCR
-#define YY_START_STACK_INCR 25
-#endif
-
-/* Report a fatal error. */
-#ifndef YY_FATAL_ERROR
-#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
-#endif
-
-/* Default declaration of generated scanner - a define so the user can
- * easily add parameters.
- */
-#ifndef YY_DECL
-#define YY_DECL int yylex YY_PROTO(( void ))
-#endif
-
-/* Code executed at the beginning of each rule, after yytext and yyleng
- * have been set up.
- */
-#ifndef YY_USER_ACTION
-#define YY_USER_ACTION
-#endif
-
-/* Code executed at the end of each rule. */
-#ifndef YY_BREAK
-#define YY_BREAK break;
-#endif
-
-#define YY_RULE_SETUP \
-	YY_USER_ACTION
-
-YY_DECL
-	{
-	register yy_state_type yy_current_state;
-	register char *yy_cp, *yy_bp;
-	register int yy_act;
-
-#line 22 "lex.l"
-
-
-
-	if ( yy_init )
-		{
-		yy_init = 0;
-
-#ifdef YY_USER_INIT
-		YY_USER_INIT;
-#endif
-
-		if ( ! yy_start )
-			yy_start = 1;	/* first start state */
-
-		if ( ! yyin )
-			yyin = stdin;
-
-		if ( ! yyout )
-			yyout = stdout;
-
-		if ( ! yy_current_buffer )
-			yy_current_buffer =
-				yy_create_buffer( yyin, YY_BUF_SIZE );
-
-		yy_load_buffer_state();
-		}
-
-	while ( 1 )		/* loops until end-of-file is reached */
-		{
-		yy_cp = yy_c_buf_p;
-
-		/* Support of yytext. */
-		*yy_cp = yy_hold_char;
-
-		/* yy_bp points to the position in yy_ch_buf of the start of
-		 * the current run.
-		 */
-		yy_bp = yy_cp;
-
-		yy_current_state = yy_start;
-yy_match:
-		do
-			{
-			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
-			if ( yy_accept[yy_current_state] )
-				{
-				yy_last_accepting_state = yy_current_state;
-				yy_last_accepting_cpos = yy_cp;
-				}
-			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
-				{
-				yy_current_state = (int) yy_def[yy_current_state];
-				if ( yy_current_state >= 688 )
-					yy_c = yy_meta[(unsigned int) yy_c];
-				}
-			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
-			++yy_cp;
-			}
-		while ( yy_base[yy_current_state] != 710 );
-
-yy_find_action:
-		yy_act = yy_accept[yy_current_state];
-		if ( yy_act == 0 )
-			{ /* have to back up */
-			yy_cp = yy_last_accepting_cpos;
-			yy_current_state = yy_last_accepting_state;
-			yy_act = yy_accept[yy_current_state];
-			}
-
-		YY_DO_BEFORE_ACTION;
-
-
-do_action:	/* This label is used only to access EOF actions. */
-
-
-		switch ( yy_act )
-	{ /* beginning of action switch */
-			case 0: /* must back up */
-			/* undo the effects of YY_DO_BEFORE_ACTION */
-			*yy_cp = yy_hold_char;
-			yy_cp = yy_last_accepting_cpos;
-			yy_current_state = yy_last_accepting_state;
-			goto yy_find_action;
-
-case 1:
-YY_RULE_SETUP
-#line 24 "lex.l"
-return(KDTREE);
-	YY_BREAK
-case 2:
-YY_RULE_SETUP
-#line 26 "lex.l"
-return(GRID);
-	YY_BREAK
-case 3:
-YY_RULE_SETUP
-#line 28 "lex.l"
-return(SUBDIVISION);
-	YY_BREAK
-case 4:
-YY_RULE_SETUP
-#line 30 "lex.l"
-return(MAXSUBLEVEL);
-	YY_BREAK
-case 5:
-YY_RULE_SETUP
-#line 32 "lex.l"
-return(BASIS);
-	YY_BREAK
-case 6:
-YY_RULE_SETUP
-#line 34 "lex.l"
-return(METABALL);
-	YY_BREAK
-case 7:
-YY_RULE_SETUP
-#line 36 "lex.l"
-return(THRESHOLD);
-	YY_BREAK
-case 8:
-YY_RULE_SETUP
-#line 38 "lex.l"
-return(GAPCOLOUR);
-	YY_BREAK
-case 9:
-YY_RULE_SETUP
-#line 40 "lex.l"
-return(GAPSIZE);
-	YY_BREAK
-case 10:
-YY_RULE_SETUP
-#line 42 "lex.l"
-return(MAXTREEDEPTH);
-	YY_BREAK
-case 11:
-YY_RULE_SETUP
-#line 44 "lex.l"
-return(SCREENSIZE);
-	YY_BREAK
-case 12:
-YY_RULE_SETUP
-#line 46 "lex.l"
-return(SOURCE);
-	YY_BREAK
-case 13:
-YY_RULE_SETUP
-#line 48 "lex.l"
-return(AMPLITUDE);
-	YY_BREAK
-case 14:
-YY_RULE_SETUP
-#line 50 "lex.l"
-return(WAVELENGTH);
-	YY_BREAK
-case 15:
-YY_RULE_SETUP
-#line 52 "lex.l"
-return(DAMPING);
-	YY_BREAK
-case 16:
-YY_RULE_SETUP
-#line 54 "lex.l"
-return(PHASE);
-	YY_BREAK
-case 17:
-YY_RULE_SETUP
-#line 56 "lex.l"
-return(ALPHA);
-	YY_BREAK
-case 18:
-YY_RULE_SETUP
-#line 58 "lex.l"
-return(SCALEFACTOR);
-	YY_BREAK
-case 19:
-YY_RULE_SETUP
-#line 60 "lex.l"
-return(SCALEFACTOR);
-	YY_BREAK
-case 20:
-YY_RULE_SETUP
-#line 62 "lex.l"
-return(SOURCERADIUS);
-	YY_BREAK
-case 21:
-YY_RULE_SETUP
-#line 64 "lex.l"
-return(TURBULENCE);
-	YY_BREAK
-case 22:
-YY_RULE_SETUP
-#line 66 "lex.l"
-return(SQUEEZE);
-	YY_BREAK
-case 23:
-YY_RULE_SETUP
-#line 68 "lex.l"
-return(OFFFILE);
-	YY_BREAK
-case 24:
-YY_RULE_SETUP
-#line 70 "lex.l"
-return(OFFFILE);
-	YY_BREAK
-case 25:
-YY_RULE_SETUP
-#line 72 "lex.l"
-return(COLOURFIELD);
-	YY_BREAK
-case 26:
-YY_RULE_SETUP
-#line 74 "lex.l"
-return(HEIGHTFIELD);
-	YY_BREAK
-case 27:
-YY_RULE_SETUP
-#line 76 "lex.l"
-return(PROJECTION);
-	YY_BREAK
-case 28:
-YY_RULE_SETUP
-#line 78 "lex.l"
-return(ORTHOGRAPHIC);
-	YY_BREAK
-case 29:
-YY_RULE_SETUP
-#line 80 "lex.l"
-return(PERSPECTIVE);
-	YY_BREAK
-case 30:
-YY_RULE_SETUP
-#line 82 "lex.l"
-return(COLOURFILE);
-	YY_BREAK
-case 31:
-YY_RULE_SETUP
-#line 84 "lex.l"
-return(NORMALFILE);
-	YY_BREAK
-case 32:
-YY_RULE_SETUP
-#line 86 "lex.l"
-return(VNORMALFILE);
-	YY_BREAK
-case 33:
-YY_RULE_SETUP
-#line 88 "lex.l"
-return(VCOLOURFILE);
-	YY_BREAK
-case 34:
-YY_RULE_SETUP
-#line 90 "lex.l"
-return(VORTFILE);
-	YY_BREAK
-case 35:
-YY_RULE_SETUP
-#line 92 "lex.l"
-return(ANTIALIASING);
-	YY_BREAK
-case 36:
-YY_RULE_SETUP
-#line 94 "lex.l"
-return(ADAPTIVE);
-	YY_BREAK
-case 37:
-YY_RULE_SETUP
-#line 96 "lex.l"
-return(BRUTE);
-	YY_BREAK
-case 38:
-YY_RULE_SETUP
-#line 98 "lex.l"
-return(TOP);
-	YY_BREAK
-case 39:
-YY_RULE_SETUP
-#line 100 "lex.l"
-return(BASE);
-	YY_BREAK
-case 40:
-YY_RULE_SETUP
-#line 102 "lex.l"
-return(CONST);
-	YY_BREAK
-case 41:
-YY_RULE_SETUP
-#line 104 "lex.l"
-return(CLIPVOLUME);
-	YY_BREAK
-case 42:
-YY_RULE_SETUP
-#line 106 "lex.l"
-return(COEFFS);
-	YY_BREAK
-case 43:
-YY_RULE_SETUP
-#line 108 "lex.l"
-return(ORDER);
-	YY_BREAK
-case 44:
-YY_RULE_SETUP
-#line 110 "lex.l"
-return(CSG);
-	YY_BREAK
-case 45:
-YY_RULE_SETUP
-#line 112 "lex.l"
-return(COMPOSITE);
-	YY_BREAK
-case 46:
-YY_RULE_SETUP
-#line 114 "lex.l"
-return(TRANSFORM);
-	YY_BREAK
-case 47:
-YY_RULE_SETUP
-#line 116 "lex.l"
-return(FRAMENO);
-	YY_BREAK
-case 48:
-YY_RULE_SETUP
-#line 118 "lex.l"
-{
-			yylval.y_int = PHONGSHADING;
-			return(OPTION);
-		}
-	YY_BREAK
-case 49:
-YY_RULE_SETUP
-#line 123 "lex.l"
-{
-			yylval.y_int = BACKFACING;
-			return(OPTION);
-		}
-	YY_BREAK
-case 50:
-YY_RULE_SETUP
-#line 128 "lex.l"
-return(ON);
-	YY_BREAK
-case 51:
-YY_RULE_SETUP
-#line 130 "lex.l"
-return(OFF);
-	YY_BREAK
-case 52:
-YY_RULE_SETUP
-#line 132 "lex.l"
-return(MATERIAL);
-	YY_BREAK
-case 53:
-YY_RULE_SETUP
-#line 134 "lex.l"
-return(CENTER);
-	YY_BREAK
-case 54:
-YY_RULE_SETUP
-#line 136 "lex.l"
-return(CENTER);
-	YY_BREAK
-case 55:
-YY_RULE_SETUP
-#line 138 "lex.l"
-return(COLOUR);
-	YY_BREAK
-case 56:
-YY_RULE_SETUP
-#line 140 "lex.l"
-return(AMBIENT);
-	YY_BREAK
-case 57:
-YY_RULE_SETUP
-#line 142 "lex.l"
-return(REFLECTANCE);
-	YY_BREAK
-case 58:
-YY_RULE_SETUP
-#line 144 "lex.l"
-return(ABSORPTION);
-	YY_BREAK
-case 59:
-YY_RULE_SETUP
-#line 146 "lex.l"
-return(TRANSPARENCY);
-	YY_BREAK
-case 60:
-YY_RULE_SETUP
-#line 148 "lex.l"
-return(HAZECOLOUR);
-	YY_BREAK
-case 61:
-YY_RULE_SETUP
-#line 150 "lex.l"
-return(FOGFACTOR);
-	YY_BREAK
-case 62:
-YY_RULE_SETUP
-#line 152 "lex.l"
-return(RFACTOR);
-	YY_BREAK
-case 63:
-YY_RULE_SETUP
-#line 154 "lex.l"
-return(FALLOFF);
-	YY_BREAK
-case 64:
-YY_RULE_SETUP
-#line 156 "lex.l"
-return(RI);
-	YY_BREAK
-case 65:
-YY_RULE_SETUP
-#line 158 "lex.l"
-return(REPEAT);
-	YY_BREAK
-case 66:
-YY_RULE_SETUP
-#line 160 "lex.l"
-return(RADIUS);
-	YY_BREAK
-case 67:
-YY_RULE_SETUP
-#line 162 "lex.l"
-return(RADII);
-	YY_BREAK
-case 68:
-YY_RULE_SETUP
-#line 164 "lex.l"
-return(STRIP);
-	YY_BREAK
-case 69:
-YY_RULE_SETUP
-#line 166 "lex.l"
-return(DIRECTION);
-	YY_BREAK
-case 70:
-YY_RULE_SETUP
-#line 168 "lex.l"
-return(ANGLE);
-	YY_BREAK
-case 71:
-YY_RULE_SETUP
-#line 170 "lex.l"
-return(INSIDEANGLE);
-	YY_BREAK
-case 72:
-YY_RULE_SETUP
-#line 172 "lex.l"
-return(BEAMDISTRIBUTION);
-	YY_BREAK
-case 73:
-YY_RULE_SETUP
-#line 174 "lex.l"
-return(MINDIST);
-	YY_BREAK
-case 74:
-YY_RULE_SETUP
-#line 176 "lex.l"
-return(NUMRAYS);
-	YY_BREAK
-case 75:
-YY_RULE_SETUP
-#line 178 "lex.l"
-return(GEOMX);
-	YY_BREAK
-case 76:
-YY_RULE_SETUP
-#line 180 "lex.l"
-return(GEOMY);
-	YY_BREAK
-case 77:
-YY_RULE_SETUP
-#line 182 "lex.l"
-return(GEOMZ);
-	YY_BREAK
-case 78:
-YY_RULE_SETUP
-#line 184 "lex.l"
-return(VERTEX);
-	YY_BREAK
-case 79:
-YY_RULE_SETUP
-#line 186 "lex.l"
-return(LOCATION);
-	YY_BREAK
-case 80:
-YY_RULE_SETUP
-#line 188 "lex.l"
-return(TEXTURE);
-	YY_BREAK
-case 81:
-YY_RULE_SETUP
-#line 190 "lex.l"
-return(MAP);
-	YY_BREAK
-case 82:
-YY_RULE_SETUP
-#line 192 "lex.l"
-return(COLOURMAP);
-	YY_BREAK
-case 83:
-YY_RULE_SETUP
-#line 194 "lex.l"
-return(RANGE);
-	YY_BREAK
-case 84:
-YY_RULE_SETUP
-#line 196 "lex.l"
-return(BLEND);
-	YY_BREAK
-case 85:
-YY_RULE_SETUP
-#line 198 "lex.l"
-return(BLENDCOLOR);
-	YY_BREAK
-case 86:
-YY_RULE_SETUP
-#line 200 "lex.l"
-return(SCALEFACTORS);
-	YY_BREAK
-case 87:
-YY_RULE_SETUP
-#line 202 "lex.l"
-return(BLOCKSIZE);
-	YY_BREAK
-case 88:
-YY_RULE_SETUP
-#line 204 "lex.l"
-return(BLOCKSIZE);
-	YY_BREAK
-case 89:
-YY_RULE_SETUP
-#line 206 "lex.l"
-return(SIZE);
-	YY_BREAK
-case 90:
-YY_RULE_SETUP
-#line 208 "lex.l"
-return(EQUATION);
-	YY_BREAK
-case 91:
-YY_RULE_SETUP
-#line 210 "lex.l"
-return(TRANSLATE);
-	YY_BREAK
-case 92:
-YY_RULE_SETUP
-#line 212 "lex.l"
-return(ROTATE);
-	YY_BREAK
-case 93:
-YY_RULE_SETUP
-#line 214 "lex.l"
-return(SCALE);
-	YY_BREAK
-case 94:
-YY_RULE_SETUP
-#line 216 "lex.l"
-return(LOOKAT);
-	YY_BREAK
-case 95:
-YY_RULE_SETUP
-#line 218 "lex.l"
-return(UP);
-	YY_BREAK
-case 96:
-YY_RULE_SETUP
-#line 220 "lex.l"
-return(FIELDOFVIEW);
-	YY_BREAK
-case 97:
-YY_RULE_SETUP
-#line 222 "lex.l"
-return(RAYSPERPIXEL);
-	YY_BREAK
-case 98:
-YY_RULE_SETUP
-#line 224 "lex.l"
-return(PIXELGRID);
-	YY_BREAK
-case 99:
-YY_RULE_SETUP
-#line 226 "lex.l"
-return(SHADOWS);
-	YY_BREAK
-case 100:
-YY_RULE_SETUP
-#line 228 "lex.l"
-return(TITLE);
-	YY_BREAK
-case 101:
-YY_RULE_SETUP
-#line 230 "lex.l"
-return(BACKGROUND);
-	YY_BREAK
-case 102:
-YY_RULE_SETUP
-#line 232 "lex.l"
-return(MAXHITLEVEL);
-	YY_BREAK
-case 103:
-YY_RULE_SETUP
-#line 234 "lex.l"
-return(OUTPUT);
-	YY_BREAK
-case 104:
-YY_RULE_SETUP
-#line 236 "lex.l"
-return(TWENTYFIVEBIT);
-	YY_BREAK
-case 105:
-YY_RULE_SETUP
-#line 238 "lex.l"
-{
-			yylval.y_int = PIX_RGB;
-			return(FILETYPE);
-		}
-	YY_BREAK
-case 106:
-YY_RULE_SETUP
-#line 243 "lex.l"
-{
-			yylval.y_int = PIX_RLE;
-			return(FILETYPE);
-		}
-	YY_BREAK
-case 107:
-YY_RULE_SETUP
-#line 248 "lex.l"
-{
-			yylval.y_int = PIX_RGBA;
-			return(FILETYPE);
-		}
-	YY_BREAK
-case 108:
-YY_RULE_SETUP
-#line 253 "lex.l"
-{
-			yylval.y_int = PIX_RLEA;
-			return(FILETYPE);
-		}
-	YY_BREAK
-case 109:
-YY_RULE_SETUP
-#line 258 "lex.l"
-{
-			if ((yylval.y_sym = lookup(yytext)) != (symbol *)NULL)
-				return(OBJECT_TYPE);
-			else {
-				yylval.y_str = (char *)smalloc(strlen(yytext) + 1);
-				strcpy(yylval.y_str, yytext);
-
-				return(NAME);
-			}
-		}
-	YY_BREAK
-case 110:
-YY_RULE_SETUP
-#line 269 "lex.l"
-{
-			yylval.y_int = atoi(yytext);
-			return(INTEGER);
-		}
-	YY_BREAK
-case 111:
-YY_RULE_SETUP
-#line 274 "lex.l"
-{
-			yylval.y_flt = atof(yytext);
-			return(FLOAT);
-		}
-	YY_BREAK
-case 112:
-YY_RULE_SETUP
-#line 279 "lex.l"
-{
-			yylval.y_flt = atof(yytext);
-			return(FLOAT);
-		}
-	YY_BREAK
-case 113:
-YY_RULE_SETUP
-#line 284 "lex.l"
-return(PLUS);
-	YY_BREAK
-case 114:
-YY_RULE_SETUP
-#line 286 "lex.l"
-return(MINUS);
-	YY_BREAK
-case 115:
-YY_RULE_SETUP
-#line 288 "lex.l"
-return(DIV);
-	YY_BREAK
-case 116:
-YY_RULE_SETUP
-#line 290 "lex.l"
-return(MULT);
-	YY_BREAK
-case 117:
-YY_RULE_SETUP
-#line 292 "lex.l"
-return(PCENT);
-	YY_BREAK
-case 118:
-YY_RULE_SETUP
-#line 294 "lex.l"
-return(POWER);
-	YY_BREAK
-case 119:
-YY_RULE_SETUP
-#line 296 "lex.l"
-return(COMMA);
-	YY_BREAK
-case 120:
-YY_RULE_SETUP
-#line 298 "lex.l"
-return(LP);
-	YY_BREAK
-case 121:
-YY_RULE_SETUP
-#line 300 "lex.l"
-return(RP);
-	YY_BREAK
-case 122:
-YY_RULE_SETUP
-#line 302 "lex.l"
-return(EQUALS);
-	YY_BREAK
-case 123:
-YY_RULE_SETUP
-#line 304 "lex.l"
-return(DOLS);
-	YY_BREAK
-case 124:
-YY_RULE_SETUP
-#line 306 "lex.l"
-{
-			char	buf[BUFSIZ], *p;
-			
-			for (p = buf; (*p = input()) != '"'; p++)
-				if (*p == '\n' || *p == EOF)
-					yyerror("syntax error");
-
-			*p = 0;
-
-			yylval.y_str = (char *)smalloc(strlen(buf) + 1);
-			strcpy(yylval.y_str, buf);
-
-			return(NAME);
-		}
-	YY_BREAK
-case 125:
-YY_RULE_SETUP
-#line 321 "lex.l"
-{
-			return(LBRACE);
-		}
-	YY_BREAK
-case 126:
-YY_RULE_SETUP
-#line 325 "lex.l"
-{
-			return(RBRACE);
-		}
-	YY_BREAK
-case 127:
-YY_RULE_SETUP
-#line 329 "lex.l"
-return(QUOTE);
-	YY_BREAK
-case 128:
-YY_RULE_SETUP
-#line 331 "lex.l"
-{
-			linecount++;
-		}
-	YY_BREAK
-case 129:
-YY_RULE_SETUP
-#line 335 "lex.l"
-{
-			;
-		}
-	YY_BREAK
-case 130:
-YY_RULE_SETUP
-#line 339 "lex.l"
-{
-			int	c, i, j;
-			char	buf[BUFSIZ], *p;
-
-			i = 0;
-			while ((c = input()) >= 0 && c != '\n')
-				buf[i++] = (char)c;
-			buf[i] = 0;
-
-			if (sscanf(buf, "%d", &linecount) != 1)
-				linecount++;
-			else {
-				for (p = buf; p != &buf[i]; p++)
-					if (*p == '"')
-						break;
-
-				if (p == &buf[i])
-					linecount++;
-				else {
-					j = 0;
-					p++;
-					while (*p != '"' && p != &buf[i])
-						currentfile[j++] = *p++;
-					currentfile[j] = 0;
-				}
-			}
-		}
-	YY_BREAK
-case 131:
-YY_RULE_SETUP
-#line 367 "lex.l"
-{
-			int	c1, c2;
-			int	comline, incomment = 1;
-			char	buf[BUFSIZ];
-
-			comline = linecount;
-
-			do {
-				while ((c1 = input()) != '*' && c1 != '/' && c1 != EOF)
-					if (c1 == '\n')
-						linecount++;
-
-				c2 = input();
-				if (c2 == '\n')
-					linecount++;
-
-				if (c1 == '*' && c2 == '/')
-					incomment--;
-
-				if (c1 == '/' && c2 == '*') {
-					incomment++;
-					comline = linecount;
-				}
-
-			} while (incomment && c2 != EOF);
-
-			if (c1 == EOF || c2 == EOF) {
-				sprintf(buf, "art: unterminated comment - started line %d.\n", comline);
-				fatal(buf);
-			}
-		}
-	YY_BREAK
-case 132:
-YY_RULE_SETUP
-#line 398 "lex.l"
-ECHO;
-	YY_BREAK
-case YY_STATE_EOF(INITIAL):
-	yyterminate();
-
-	case YY_END_OF_BUFFER:
-		{
-		/* Amount of text matched not including the EOB char. */
-		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;
-
-		/* Undo the effects of YY_DO_BEFORE_ACTION. */
-		*yy_cp = yy_hold_char;
-		YY_RESTORE_YY_MORE_OFFSET
-
-		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
-			{
-			/* We're scanning a new file or input source.  It's
-			 * possible that this happened because the user
-			 * just pointed yyin at a new source and called
-			 * yylex().  If so, then we have to assure
-			 * consistency between yy_current_buffer and our
-			 * globals.  Here is the right place to do so, because
-			 * this is the first action (other than possibly a
-			 * back-up) that will match for the new input source.
-			 */
-			yy_n_chars = yy_current_buffer->yy_n_chars;
-			yy_current_buffer->yy_input_file = yyin;
-			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
-			}
-
-		/* Note that here we test for yy_c_buf_p "<=" to the position
-		 * of the first EOB in the buffer, since yy_c_buf_p will
-		 * already have been incremented past the NUL character
-		 * (since all states make transitions on EOB to the
-		 * end-of-buffer state).  Contrast this with the test
-		 * in input().
-		 */
-		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
-			{ /* This was really a NUL. */
-			yy_state_type yy_next_state;
-
-			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;
-
-			yy_current_state = yy_get_previous_state();
-
-			/* Okay, we're now positioned to make the NUL
-			 * transition.  We couldn't have
-			 * yy_get_previous_state() go ahead and do it
-			 * for us because it doesn't know how to deal
-			 * with the possibility of jamming (and we don't
-			 * want to build jamming into it because then it
-			 * will run more slowly).
-			 */
-
-			yy_next_state = yy_try_NUL_trans( yy_current_state );
-
-			yy_bp = yytext_ptr + YY_MORE_ADJ;
-
-			if ( yy_next_state )
-				{
-				/* Consume the NUL. */
-				yy_cp = ++yy_c_buf_p;
-				yy_current_state = yy_next_state;
-				goto yy_match;
-				}
-
-			else
-				{
-				yy_cp = yy_c_buf_p;
-				goto yy_find_action;
-				}
-			}
-
-		else switch ( yy_get_next_buffer() )
-			{
-			case EOB_ACT_END_OF_FILE:
-				{
-				yy_did_buffer_switch_on_eof = 0;
-
-				if ( yywrap() )
-					{
-					/* Note: because we've taken care in
-					 * yy_get_next_buffer() to have set up
-					 * yytext, we can now set up
-					 * yy_c_buf_p so that if some total
-					 * hoser (like flex itself) wants to
-					 * call the scanner after we return the
-					 * YY_NULL, it'll still work - another
-					 * YY_NULL will get returned.
-					 */
-					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
-
-					yy_act = YY_STATE_EOF(YY_START);
-					goto do_action;
-					}
-
-				else
-					{
-					if ( ! yy_did_buffer_switch_on_eof )
-						YY_NEW_FILE;
-					}
-				break;
-				}
-
-			case EOB_ACT_CONTINUE_SCAN:
-				yy_c_buf_p =
-					yytext_ptr + yy_amount_of_matched_text;
-
-				yy_current_state = yy_get_previous_state();
-
-				yy_cp = yy_c_buf_p;
-				yy_bp = yytext_ptr + YY_MORE_ADJ;
-				goto yy_match;
-
-			case EOB_ACT_LAST_MATCH:
-				yy_c_buf_p =
-				&yy_current_buffer->yy_ch_buf[yy_n_chars];
-
-				yy_current_state = yy_get_previous_state();
-
-				yy_cp = yy_c_buf_p;
-				yy_bp = yytext_ptr + YY_MORE_ADJ;
-				goto yy_find_action;
-			}
-		break;
-		}
-
-	default:
-		YY_FATAL_ERROR(
-			"fatal flex scanner internal error--no action found" );
-	} /* end of action switch */
-		} /* end of scanning one token */
-	} /* end of yylex */
-
-
-/* yy_get_next_buffer - try to read in a new buffer
- *
- * Returns a code representing an action:
- *	EOB_ACT_LAST_MATCH -
- *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
- *	EOB_ACT_END_OF_FILE - end of file
- */
-
-static int yy_get_next_buffer()
-	{
-	register char *dest = yy_current_buffer->yy_ch_buf;
-	register char *source = yytext_ptr;
-	register int number_to_move, i;
-	int ret_val;
-
-	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
-		YY_FATAL_ERROR(
-		"fatal flex scanner internal error--end of buffer missed" );
-
-	if ( yy_current_buffer->yy_fill_buffer == 0 )
-		{ /* Don't try to fill the buffer, so this is an EOF. */
-		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
-			{
-			/* We matched a single character, the EOB, so
-			 * treat this as a final EOF.
-			 */
-			return EOB_ACT_END_OF_FILE;
-			}
-
-		else
-			{
-			/* We matched some text prior to the EOB, first
-			 * process it.
-			 */
-			return EOB_ACT_LAST_MATCH;
-			}
-		}
-
-	/* Try to read more data. */
-
-	/* First move last chars to start of buffer. */
-	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;
-
-	for ( i = 0; i < number_to_move; ++i )
-		*(dest++) = *(source++);
-
-	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
-		/* don't do the read, it's not guaranteed to return an EOF,
-		 * just force an EOF
-		 */
-		yy_current_buffer->yy_n_chars = yy_n_chars = 0;
-
-	else
-		{
-		int num_to_read =
-			yy_current_buffer->yy_buf_size - number_to_move - 1;
-
-		while ( num_to_read <= 0 )
-			{ /* Not enough room in the buffer - grow it. */
-#ifdef YY_USES_REJECT
-			YY_FATAL_ERROR(
-"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
-#else
-
-			/* just a shorter name for the current buffer */
-			YY_BUFFER_STATE b = yy_current_buffer;
-
-			int yy_c_buf_p_offset =
-				(int) (yy_c_buf_p - b->yy_ch_buf);
-
-			if ( b->yy_is_our_buffer )
-				{
-				int new_size = b->yy_buf_size * 2;
-
-				if ( new_size <= 0 )
-					b->yy_buf_size += b->yy_buf_size / 8;
-				else
-					b->yy_buf_size *= 2;
-
-				b->yy_ch_buf = (char *)
-					/* Include room in for 2 EOB chars. */
-					yy_flex_realloc( (void *) b->yy_ch_buf,
-							 b->yy_buf_size + 2 );
-				}
-			else
-				/* Can't grow it, we don't own it. */
-				b->yy_ch_buf = 0;
-
-			if ( ! b->yy_ch_buf )
-				YY_FATAL_ERROR(
-				"fatal error - scanner input buffer overflow" );
-
-			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
-
-			num_to_read = yy_current_buffer->yy_buf_size -
-						number_to_move - 1;
-#endif
-			}
-
-		if ( num_to_read > YY_READ_BUF_SIZE )
-			num_to_read = YY_READ_BUF_SIZE;
-
-		/* Read in more data. */
-		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
-			yy_n_chars, num_to_read );
-
-		yy_current_buffer->yy_n_chars = yy_n_chars;
-		}
-
-	if ( yy_n_chars == 0 )
-		{
-		if ( number_to_move == YY_MORE_ADJ )
-			{
-			ret_val = EOB_ACT_END_OF_FILE;
-			yyrestart( yyin );
-			}
-
-		else
-			{
-			ret_val = EOB_ACT_LAST_MATCH;
-			yy_current_buffer->yy_buffer_status =
-				YY_BUFFER_EOF_PENDING;
-			}
-		}
-
-	else
-		ret_val = EOB_ACT_CONTINUE_SCAN;
-
-	yy_n_chars += number_to_move;
-	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
-	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
-
-	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];
-
-	return ret_val;
-	}
-
-
-/* yy_get_previous_state - get the state just before the EOB char was reached */
-
-static yy_state_type yy_get_previous_state()
-	{
-	register yy_state_type yy_current_state;
-	register char *yy_cp;
-
-	yy_current_state = yy_start;
-
-	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
-		{
-		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
-		if ( yy_accept[yy_current_state] )
-			{
-			yy_last_accepting_state = yy_current_state;
-			yy_last_accepting_cpos = yy_cp;
-			}
-		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
-			{
-			yy_current_state = (int) yy_def[yy_current_state];
-			if ( yy_current_state >= 688 )
-				yy_c = yy_meta[(unsigned int) yy_c];
-			}
-		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
-		}
-
-	return yy_current_state;
-	}
-
-
-/* yy_try_NUL_trans - try to make a transition on the NUL character
- *
- * synopsis
- *	next_state = yy_try_NUL_trans( current_state );
- */
-
-#ifdef YY_USE_PROTOS
-static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
-#else
-static yy_state_type yy_try_NUL_trans( yy_current_state )
-yy_state_type yy_current_state;
-#endif
-	{
-	register int yy_is_jam;
-	register char *yy_cp = yy_c_buf_p;
-
-	register YY_CHAR yy_c = 1;
-	if ( yy_accept[yy_current_state] )
-		{
-		yy_last_accepting_state = yy_current_state;
-		yy_last_accepting_cpos = yy_cp;
-		}
-	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
-		{
-		yy_current_state = (int) yy_def[yy_current_state];
-		if ( yy_current_state >= 688 )
-			yy_c = yy_meta[(unsigned int) yy_c];
-		}
-	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
-	yy_is_jam = (yy_current_state == 687);
-
-	return yy_is_jam ? 0 : yy_current_state;
-	}
-
-
-#ifndef YY_NO_UNPUT
-#ifdef YY_USE_PROTOS
-static void yyunput( int c, register char *yy_bp )
-#else
-static void yyunput( c, yy_bp )
-int c;
-register char *yy_bp;
-#endif
-	{
-	register char *yy_cp = yy_c_buf_p;
-
-	/* undo effects of setting up yytext */
-	*yy_cp = yy_hold_char;
-
-	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
-		{ /* need to shift things up to make room */
-		/* +2 for EOB chars. */
-		register int number_to_move = yy_n_chars + 2;
-		register char *dest = &yy_current_buffer->yy_ch_buf[
-					yy_current_buffer->yy_buf_size + 2];
-		register char *source =
-				&yy_current_buffer->yy_ch_buf[number_to_move];
-
-		while ( source > yy_current_buffer->yy_ch_buf )
-			*--dest = *--source;
-
-		yy_cp += (int) (dest - source);
-		yy_bp += (int) (dest - source);
-		yy_current_buffer->yy_n_chars =
-			yy_n_chars = yy_current_buffer->yy_buf_size;
-
-		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
-			YY_FATAL_ERROR( "flex scanner push-back overflow" );
-		}
-
-	*--yy_cp = (char) c;
-
-
-	yytext_ptr = yy_bp;
-	yy_hold_char = *yy_cp;
-	yy_c_buf_p = yy_cp;
-	}
-#endif	/* ifndef YY_NO_UNPUT */
-
-
-#ifdef __cplusplus
-static int yyinput()
-#else
-static int input()
-#endif
-	{
-	int c;
-
-	*yy_c_buf_p = yy_hold_char;
-
-	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
-		{
-		/* yy_c_buf_p now points to the character we want to return.
-		 * If this occurs *before* the EOB characters, then it's a
-		 * valid NUL; if not, then we've hit the end of the buffer.
-		 */
-		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
-			/* This was really a NUL. */
-			*yy_c_buf_p = '\0';
-
-		else
-			{ /* need more input */
-			int offset = yy_c_buf_p - yytext_ptr;
-			++yy_c_buf_p;
-
-			switch ( yy_get_next_buffer() )
-				{
-				case EOB_ACT_LAST_MATCH:
-					/* This happens because yy_g_n_b()
-					 * sees that we've accumulated a
-					 * token and flags that we need to
-					 * try matching the token before
-					 * proceeding.  But for input(),
-					 * there's no matching to consider.
-					 * So convert the EOB_ACT_LAST_MATCH
-					 * to EOB_ACT_END_OF_FILE.
-					 */
-
-					/* Reset buffer status. */
-					yyrestart( yyin );
-
-					/* fall through */
-
-				case EOB_ACT_END_OF_FILE:
-					{
-					if ( yywrap() )
-						return EOF;
-
-					if ( ! yy_did_buffer_switch_on_eof )
-						YY_NEW_FILE;
-#ifdef __cplusplus
-					return yyinput();
-#else
-					return input();
-#endif
-					}
-
-				case EOB_ACT_CONTINUE_SCAN:
-					yy_c_buf_p = yytext_ptr + offset;
-					break;
-				}
-			}
-		}
-
-	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
-	*yy_c_buf_p = '\0';	/* preserve yytext */
-	yy_hold_char = *++yy_c_buf_p;
-
-
-	return c;
-	}
-
-
-#ifdef YY_USE_PROTOS
-void yyrestart( FILE *input_file )
-#else
-void yyrestart( input_file )
-FILE *input_file;
-#endif
-	{
-	if ( ! yy_current_buffer )
-		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );
-
-	yy_init_buffer( yy_current_buffer, input_file );
-	yy_load_buffer_state();
-	}
-
-
-#ifdef YY_USE_PROTOS
-void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
-#else
-void yy_switch_to_buffer( new_buffer )
-YY_BUFFER_STATE new_buffer;
-#endif
-	{
-	if ( yy_current_buffer == new_buffer )
-		return;
-
-	if ( yy_current_buffer )
-		{
-		/* Flush out information for old buffer. */
-		*yy_c_buf_p = yy_hold_char;
-		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
-		yy_current_buffer->yy_n_chars = yy_n_chars;
-		}
-
-	yy_current_buffer = new_buffer;
-	yy_load_buffer_state();
-
-	/* We don't actually know whether we did this switch during
-	 * EOF (yywrap()) processing, but the only time this flag
-	 * is looked at is after yywrap() is called, so it's safe
-	 * to go ahead and always set it.
-	 */
-	yy_did_buffer_switch_on_eof = 1;
-	}
-
-
-#ifdef YY_USE_PROTOS
-void yy_load_buffer_state( void )
-#else
-void yy_load_buffer_state()
-#endif
-	{
-	yy_n_chars = yy_current_buffer->yy_n_chars;
-	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
-	yyin = yy_current_buffer->yy_input_file;
-	yy_hold_char = *yy_c_buf_p;
-	}
-
-
-#ifdef YY_USE_PROTOS
-YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
-#else
-YY_BUFFER_STATE yy_create_buffer( file, size )
-FILE *file;
-int size;
-#endif
-	{
-	YY_BUFFER_STATE b;
-
-	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
-	if ( ! b )
-		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
-
-	b->yy_buf_size = size;
-
-	/* yy_ch_buf has to be 2 characters longer than the size given because
-	 * we need to put in 2 end-of-buffer characters.
-	 */
-	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
-	if ( ! b->yy_ch_buf )
-		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
-
-	b->yy_is_our_buffer = 1;
-
-	yy_init_buffer( b, file );
-
-	return b;
-	}
-
-
-#ifdef YY_USE_PROTOS
-void yy_delete_buffer( YY_BUFFER_STATE b )
-#else
-void yy_delete_buffer( b )
-YY_BUFFER_STATE b;
-#endif
-	{
-	if ( ! b )
-		return;
-
-	if ( b == yy_current_buffer )
-		yy_current_buffer = (YY_BUFFER_STATE) 0;
-
-	if ( b->yy_is_our_buffer )
-		yy_flex_free( (void *) b->yy_ch_buf );
-
-	yy_flex_free( (void *) b );
-	}
-
-
-#ifndef YY_ALWAYS_INTERACTIVE
-#ifndef YY_NEVER_INTERACTIVE
-extern int isatty YY_PROTO(( int ));
-#endif
-#endif
-
-#ifdef YY_USE_PROTOS
-void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
-#else
-void yy_init_buffer( b, file )
-YY_BUFFER_STATE b;
-FILE *file;
-#endif
-
-
-	{
-	yy_flush_buffer( b );
-
-	b->yy_input_file = file;
-	b->yy_fill_buffer = 1;
-
-#if YY_ALWAYS_INTERACTIVE
-	b->yy_is_interactive = 1;
-#else
-#if YY_NEVER_INTERACTIVE
-	b->yy_is_interactive = 0;
-#else
-	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
-#endif
-#endif
-	}
-
-
-#ifdef YY_USE_PROTOS
-void yy_flush_buffer( YY_BUFFER_STATE b )
-#else
-void yy_flush_buffer( b )
-YY_BUFFER_STATE b;
-#endif
-
-	{
-	if ( ! b )
-		return;
-
-	b->yy_n_chars = 0;
-
-	/* We always need two end-of-buffer characters.  The first causes
-	 * a transition to the end-of-buffer state.  The second causes
-	 * a jam in that state.
-	 */
-	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
-	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
-
-	b->yy_buf_pos = &b->yy_ch_buf[0];
-
-	b->yy_at_bol = 1;
-	b->yy_buffer_status = YY_BUFFER_NEW;
-
-	if ( b == yy_current_buffer )
-		yy_load_buffer_state();
-	}
-
-
-#ifndef YY_NO_SCAN_BUFFER
-#ifdef YY_USE_PROTOS
-YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
-#else
-YY_BUFFER_STATE yy_scan_buffer( base, size )
-char *base;
-yy_size_t size;
-#endif
-	{
-	YY_BUFFER_STATE b;
-
-	if ( size < 2 ||
-	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
-	     base[size-1] != YY_END_OF_BUFFER_CHAR )
-		/* They forgot to leave room for the EOB's. */
-		return 0;
-
-	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
-	if ( ! b )
-		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
-
-	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
-	b->yy_buf_pos = b->yy_ch_buf = base;
-	b->yy_is_our_buffer = 0;
-	b->yy_input_file = 0;
-	b->yy_n_chars = b->yy_buf_size;
-	b->yy_is_interactive = 0;
-	b->yy_at_bol = 1;
-	b->yy_fill_buffer = 0;
-	b->yy_buffer_status = YY_BUFFER_NEW;
-
-	yy_switch_to_buffer( b );
-
-	return b;
-	}
-#endif
-
-
-#ifndef YY_NO_SCAN_STRING
-#ifdef YY_USE_PROTOS
-YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
-#else
-YY_BUFFER_STATE yy_scan_string( yy_str )
-yyconst char *yy_str;
-#endif
-	{
-	int len;
-	for ( len = 0; yy_str[len]; ++len )
-		;
-
-	return yy_scan_bytes( yy_str, len );
-	}
-#endif
-
-
-#ifndef YY_NO_SCAN_BYTES
-#ifdef YY_USE_PROTOS
-YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
-#else
-YY_BUFFER_STATE yy_scan_bytes( bytes, len )
-yyconst char *bytes;
-int len;
-#endif
-	{
-	YY_BUFFER_STATE b;
-	char *buf;
-	yy_size_t n;
-	int i;
-
-	/* Get memory for full buffer, including space for trailing EOB's. */
-	n = len + 2;
-	buf = (char *) yy_flex_alloc( n );
-	if ( ! buf )
-		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
-
-	for ( i = 0; i < len; ++i )
-		buf[i] = bytes[i];
-
-	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;
-
-	b = yy_scan_buffer( buf, n );
-	if ( ! b )
-		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
-
-	/* It's okay to grow etc. this buffer, and we should throw it
-	 * away when we're done.
-	 */
-	b->yy_is_our_buffer = 1;
-
-	return b;
-	}
-#endif
-
-
-#ifndef YY_NO_PUSH_STATE
-#ifdef YY_USE_PROTOS
-static void yy_push_state( int new_state )
-#else
-static void yy_push_state( new_state )
-int new_state;
-#endif
-	{
-	if ( yy_start_stack_ptr >= yy_start_stack_depth )
-		{
-		yy_size_t new_size;
-
-		yy_start_stack_depth += YY_START_STACK_INCR;
-		new_size = yy_start_stack_depth * sizeof( int );
-
-		if ( ! yy_start_stack )
-			yy_start_stack = (int *) yy_flex_alloc( new_size );
-
-		else
-			yy_start_stack = (int *) yy_flex_realloc(
-					(void *) yy_start_stack, new_size );
-
-		if ( ! yy_start_stack )
-			YY_FATAL_ERROR(
-			"out of memory expanding start-condition stack" );
-		}
-
-	yy_start_stack[yy_start_stack_ptr++] = YY_START;
-
-	BEGIN(new_state);
-	}
-#endif
-
-
-#ifndef YY_NO_POP_STATE
-static void yy_pop_state()
-	{
-	if ( --yy_start_stack_ptr < 0 )
-		YY_FATAL_ERROR( "start-condition stack underflow" );
-
-	BEGIN(yy_start_stack[yy_start_stack_ptr]);
-	}
-#endif
-
-
-#ifndef YY_NO_TOP_STATE
-static int yy_top_state()
-	{
-	return yy_start_stack[yy_start_stack_ptr - 1];
-	}
-#endif
-
-#ifndef YY_EXIT_FAILURE
-#define YY_EXIT_FAILURE 2
-#endif
-
-#ifdef YY_USE_PROTOS
-static void yy_fatal_error( yyconst char msg[] )
-#else
-static void yy_fatal_error( msg )
-char msg[];
-#endif
-	{
-	(void) fprintf( stderr, "%s\n", msg );
-	exit( YY_EXIT_FAILURE );
-	}
-
-
-
-/* Redefine yyless() so it works in section 3 code. */
-
-#undef yyless
-#define yyless(n) \
-	do \
-		{ \
-		/* Undo effects of setting up yytext. */ \
-		yytext[yyleng] = yy_hold_char; \
-		yy_c_buf_p = yytext + n; \
-		yy_hold_char = *yy_c_buf_p; \
-		*yy_c_buf_p = '\0'; \
-		yyleng = n; \
-		} \
-	while ( 0 )
-
-
-/* Internal utility routines. */
-
-#ifndef yytext_ptr
-#ifdef YY_USE_PROTOS
-static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
-#else
-static void yy_flex_strncpy( s1, s2, n )
-char *s1;
-yyconst char *s2;
-int n;
-#endif
-	{
-	register int i;
-	for ( i = 0; i < n; ++i )
-		s1[i] = s2[i];
-	}
-#endif
-
-#ifdef YY_NEED_STRLEN
-#ifdef YY_USE_PROTOS
-static int yy_flex_strlen( yyconst char *s )
-#else
-static int yy_flex_strlen( s )
-yyconst char *s;
-#endif
-	{
-	register int n;
-	for ( n = 0; s[n]; ++n )
-		;
-
-	return n;
-	}
-#endif
-
-
-#ifdef YY_USE_PROTOS
-static void *yy_flex_alloc( yy_size_t size )
-#else
-static void *yy_flex_alloc( size )
-yy_size_t size;
-#endif
-	{
-	return (void *) malloc( size );
-	}
-
-#ifdef YY_USE_PROTOS
-static void *yy_flex_realloc( void *ptr, yy_size_t size )
-#else
-static void *yy_flex_realloc( ptr, size )
-void *ptr;
-yy_size_t size;
-#endif
-	{
-	/* The cast to (char *) in the following accommodates both
-	 * implementations that use char* generic pointers, and those
-	 * that use void* generic pointers.  It works with the latter
-	 * because both ANSI C and C++ allow castless assignment from
-	 * any pointer type to void*, and deal with argument conversions
-	 * as though doing an assignment.
-	 */
-	return (void *) realloc( (char *) ptr, size );
-	}
-
-#ifdef YY_USE_PROTOS
-static void yy_flex_free( void *ptr )
-#else
-static void yy_flex_free( ptr )
-void *ptr;
-#endif
-	{
-	free( ptr );
-	}
-
-#if YY_MAIN
-int main()
-	{
-	yylex();
-	return 0;
-	}
-#endif
-#line 398 "lex.l"
