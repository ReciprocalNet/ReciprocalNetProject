/*
 * Reciprocal Net Project
 * 
 * InvalidSignatureException.java
 *
 * 12-Feb-2003: jobollin autogenerated skeleton source from UML model
 * 12-Feb-2003: jobollin cleaned up and completed the autogenerated source
 * 17-Jul-2006: jobollin performed further cleanup
 */

package org.recipnet.site.core;

import org.recipnet.site.InvalidDataException;

/**
 * An {@code InvalidDataException} subclass specific to situations where an
 * incorrect digital signature was detected; these indicate either tampering
 * attempts or system software bugs and thus warrant special handling
 */
public class InvalidSignatureException extends InvalidDataException {

    /**
     * A class representing a digitally signed data block with its source and
     * signature
     */
    private static class SignedData {

        /**
         * The body of the signed data object
         */
        public byte[] data;

        /**
         * The digital signature provided for the data
         */
        public byte[] signature;

        /**
         * A {@code String} identifying the entity that provided {@code data}
         * and {@code signature}; not necessarilly the same as the entitiy
         * purported to have <em>signed</em> {@code data}
         */
        public String source;

        /**
         * Creates a new {@code SignedData} with the specified data, signature,
         * and signer; the content of {@code _data} and {@code _signature} are
         * copied, not the references themselves
         * 
         * @param _data a {@code byte[]} containing the data for which
         *        {@code _signature} is purported to be a digital signature
         * @param _signature a {@code byte[]} containing the purported digital
         *        signature for {@code _data}
         * @param _source a {@code String} identifying the entity that provided
         *        {@code _signature} and {@code _data}
         */
        public SignedData(byte[] _data, byte[] _signature, String _source) {
            if (_data != null) {
                data = new byte[_data.length];
                System.arraycopy(_data, 0, data, 0, _data.length);
            } else {
                data = null;
            }
            if (_signature != null) {
                signature = new byte[_signature.length];
                System
                        .arraycopy(_signature, 0, signature, 0,
                                _signature.length);
            } else {
                signature = null;
            }
            source = _source;
        }

    }

    /**
     * Creates a new {@code InvalidSignatureException}
     */
    public InvalidSignatureException() {
        this(null, null, null, null, null);
    }

    /**
     * Creates a new {@code InvalidSignatureException} with the specified detail
     * message, signed data, signature, and signer
     * 
     * @param data a {@code byte[]} containing the signed data
     * @param signature a {@code byte[]} containing the purported signature
     * @param source a {@code String} identifying the immediate source of the
     *        {@code signature} and {@code data}
     * @param cause the {@code Throwable} cause of this exception
     */
    public InvalidSignatureException(byte[] data, byte[] signature,
            String source, Throwable cause) {
        this(null, data, signature, source, cause);
    }

    /**
     * Creates a new {@code InvalidSignatureException} with the specified detail
     * message, signed data, signature, and signer
     * 
     * @param message a {@code String} containing the detail message for this
     *        exception
     * @param data a {@code byte[]} containing the signed data
     * @param signature a {@code byte[]} containing the purported signature
     * @param source a {@code String} identifying the immediate source of the
     *        {@code signature} and {@code data}
     * @param cause the {@code Throwable} cause of this exception
     */
    public InvalidSignatureException(String message, byte[] data,
            byte[] signature, String source, Throwable cause) {
        super(message, new SignedData(data, signature, source),
                InvalidDataException.OTHER);
        
        // TODO: this isn't really right.  A null cause is still a cause.
        if (cause != null) {
            initCause(cause);
        }
    }

    /**
     * Retrieves the signed data
     * 
     * @return a {@code byte[]} containing the signed data, or {@code null} if
     *         none was provided
     */
    public byte[] getData() {
        byte[] data = ((SignedData) getInvalidDataObject()).data;

        if (data != null) {
            byte[] rval = new byte[data.length];

            System.arraycopy(data, 0, rval, 0, data.length);

            return rval;
        } else {
            return null;
        }
    }

    /**
     * Returns the purported digital signature for the data
     * 
     * @return a {@code byte[]} containing the signature, or {@code null} if
     *         none was provided
     */
    public byte[] getSignature() {
        byte[] signature = ((SignedData) getInvalidDataObject()).signature;

        if (signature != null) {
            byte[] rval = new byte[signature.length];

            System.arraycopy(signature, 0, rval, 0, signature.length);

            return rval;
        } else {
            return null;
        }
    }

    /**
     * Returns a {@code String} identifying the source of the signed data
     * 
     * @return a {@code String} identifying the entity that provided the data
     *         and signature; not necessarilly the same entity that is purported
     *         to have created them; may be {@code null}
     */
    public String getSource() {
        return ((SignedData) getInvalidDataObject()).source;
    }

}
