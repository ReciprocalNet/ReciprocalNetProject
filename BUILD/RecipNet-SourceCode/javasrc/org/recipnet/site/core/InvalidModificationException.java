/*
 * Reciprocal Net Project
 * 
 * InvalidModificationException.java
 *
 * 12-Feb-2003: jobollin autogenerated skeleton source from UML model
 * 12-Feb-2003: jobollin cleaned up and completed the autogenerated source
 * 21-Feb-2003: ekoperda added reason code CANTCHANGE_LOCALLABID
 * 29-May-2003: ekoperda added reason code HOLDING_ALREADY_EXISTS
 * 07-Jan-2004: ekoperda changed package references to match source tree
 *              reorganization
 * 26-May-2006: jobollin performed minor cleanup
 */

package org.recipnet.site.core;

import org.recipnet.site.OperationNotPermittedException;
import org.recipnet.site.shared.db.ContainerObject;

/**
 * In {@code OperationNotPermittedException} subclass for use when an attempt is
 * made to change an invariant property of a Reciprocal Net data object
 */
public class InvalidModificationException extends
        OperationNotPermittedException {

    /**
     * A reason code indicating that the object's creation date cannot be
     * changed
     */
    public static final int CANTCHANGE_CREATIONDATE = 0x1;

    /**
     * A reason code indicating that the object's lab id cannot be changed
     */
    public static final int CANTCHANGE_LAB = 0x2;

    /**
     * A reason code indicating that the object's provider id cannot be changed
     */
    public static final int CANTCHANGE_PROVIDER = 0x4;

    /**
     * A reason code indicating that the object's site id cannot be changed
     */
    public static final int CANTCHANGE_SITE = 0x8;

    /**
     * A reason code indicating that the object's username cannot be changed
     */
    public static final int CANTCHANGE_USERNAME = 0x10;

    /**
     * A reason code indicating that the object's localLabId cannot be changed
     */
    public static final int CANTCHANGE_LOCALLABID = 0x20;

    /**
     * A reason code indicating that a local repository holding already exists
     * for the specific sample.
     */
    public static final int HOLDING_ALREADY_EXISTS = 0x40;

    /**
     * A reason code indicating that the object is inactive and cannot be
     * modified in any way
     */
    public static final int INACTIVE = 0x80;

    /**
     * The reason code for this exception
     */
    private int reason;

    /**
     * Creates a new {@code InvalidModificationException}
     */
    public InvalidModificationException() {
        this(null, 0, null);
    }

    /**
     * Creates a new {@code InvalidModificationException} with the specified
     * reason and invalidly modified data
     * 
     * @param reason the reason code describing the invalid modification; a
     *        combination of one or more of the bitfields {@code CANTCHANGE_*}
     *        and {@code INACTIVE}
     * @param container an appropriate {@code ContainerObject} reflecting the
     *        requested modifications
     */
    public InvalidModificationException(int reason, ContainerObject container) {
        this(null, reason, container);
    }

    /**
     * Creates a new {@code InvalidModificationException} with the specified
     * reason and invalidly modified data
     * 
     * @param message the detail message for this exception
     * @param reason the reason code describing the invalid modification; a
     *        combination of one or more of the bitfields {@code CANTCHANGE_*}
     *        and {@code INACTIVE}
     * @param container an appropriate {@code ContainerObject} reflecting the
     *        requested modifications
     */
    public InvalidModificationException(String message, int reason,
            ContainerObject container) {
        super(message, container);
        this.reason = reason;
    }

    /**
     * Returns the reason code for this exception
     * 
     * @return the reson code for this exception; a combination of one or more
     *         of the individual reasons CANTCHANGE_* and INACTIVE
     */
    public int getReason() {
        return reason;
    }

    /**
     * Returns an appropriate {@code ContainerObject} reflecting the requested
     * modifications
     * 
     * @return an appropriate {@code ContainerObject} reflecting the requested
     *         modifications (one or more of which is invalid)
     */
    public ContainerObject getInvalidModificationObject() {
        return (ContainerObject) getObject();
    }
}
