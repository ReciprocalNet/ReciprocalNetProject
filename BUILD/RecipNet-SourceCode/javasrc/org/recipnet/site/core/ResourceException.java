/*
 * Reciprocal Net Project
 * @(#)ResourceException.java
 *
 * 12-Feb-2003: jobollin autogenerated skeleton source from UML model
 * 12-Feb-2003: jobollin cleaned up and completed the autogenerated source
 * 21-Feb-2003: ekoperda added 2-param constructor that takes a Throwable
 * 24-Mar-2003: jobollin updated the constructors as part of task #808
 */

package org.recipnet.site.core;

import org.recipnet.site.OperationFailedException;

/**
 * An {@code OperationFailedException} subclass that may be thrown when the
 * reason for the failure is an unresolvable issue with a required resource
 */
public class ResourceException extends OperationFailedException {

    /**
     * An identifier for the problematic resource; might be a {@code String},
     * {@code File}, {@code URL}, {@code ContainerObject}, or other type of
     * object as appropriate for the resource type
     */
    private final Object resourceIdentifier;

    /**
     * Creates a new {@code ResourceException}
     */
    public ResourceException() {
        this((Object) null);
    }

    /**
     * Creates a new {@code ResourceException} with the specified detail message
     * 
     * @param message the detail message
     */
    public ResourceException(String message) {
        this(message, (Object) null);
    }

    /**
     * Creates a new {@code ResourceException} with the specified resource
     * identifier
     * 
     * @param identifier the identifier object of the resource associated with
     *        this exception
     */
    public ResourceException(Object identifier) {
        super();
        resourceIdentifier = identifier;
    }

    /**
     * Creates a new {@code ResourceException} with the specified resource
     * identifier and root cause
     * 
     * @param identifier the identifier object of the resource associated with
     *        this exception
     * @param cause the {@code Throwable} cause for this exception
     */
    public ResourceException(Object identifier, Throwable cause) {
        this(identifier);
        initCause(cause);
    }

    /**
     * Creates a new {@code ResourceException} with the specified detail message
     * and resource identifier
     * 
     * @param message the detail message for this exception
     * @param identifier the identifier object of the resource associated with
     *        this exception
     */
    public ResourceException(String message, Object identifier) {
        super(message);
        resourceIdentifier = identifier;
    }

    /**
     * Retrieves the identifier of the resource associated with this exception
     * 
     * @return the identifier {@code Object} for the problematic resource; might
     *         be a {@code String}, {@code File}, {@code URL},
     *         {@code ContainerObject}, or other type of object as appropriate
     *         for the resource type; may be {@code null} if no identifier was
     *         provided when this exception was constructed
     */
    public Object getResourceIdentifier() {
        return resourceIdentifier;
    }

    /**
     * Returns a {@code String} version of the identifier for the problematic
     * resource, as obtained by invoking the object's {@code toString()} method
     * 
     * @return a {@code String} version of the resource identifier; {@code null}
     *         if this exception contains no resource identifier
     */
    public String getResourceIdentifierAsString() {
        return (resourceIdentifier == null) ? null : resourceIdentifier
                .toString();
    }

}
