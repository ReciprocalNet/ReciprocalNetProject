/*
 * Reciprocal Net project
 * 
 * RepositoryFileInfo.java
 *
 * 23-May-2003: ekoperda wrote first draft
 * 07-Jan-2004: ekoperda moved file from org.recipnet.site.container package to
 *              org.recipnet.site.shared.db
 * 23-Nov-2004: eisiorho added field 'originalSampleHistoryId'
 * 17-Oct-2005: midurbin made this class implement the Serializable interface
 * 21-Oct-2005: midurbin added 'description' field
 * 31-May-2006: jobollin reformatted the source
 */

package org.recipnet.site.shared.db;

import java.io.Serializable;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Container class that represents a single row in the db table
 * {@code repositoryFiles}. Each object describes a particular version of a
 * data file that's associated with one or more versions of a particular sample.
 */
public class RepositoryFileInfo implements Serializable {
    
    public static final int INVALID_REPOSITORY_FILE_ID = -1;

    /**
     * Unique id for the row; auto-generated by db engine. This is
     * {@code INVALID_REPOSITORY_FILE_ID} if an id has not yet been assigned.
     */
    public int id = INVALID_REPOSITORY_FILE_ID;

    /** Identifies the file/version's associated sample. */
    public int sampleId = SampleInfo.INVALID_SAMPLE_ID;

    /** Identifies the first sample version for which the binding is valid. */
    public int firstSampleHistoryId
            = SampleHistoryInfo.INVALID_SAMPLE_HISTORY_ID;

    /**
     * Identifies the sample version at which the binding became invalid. If the
     * binding is still valid (that is, it's valid for the most recent version
     * of the associated sample), this value is
     * {@code INVALID_SAMPLE_HISTORY_ID}.
     */
    public int lastSampleHistoryId
            = SampleHistoryInfo.INVALID_SAMPLE_HISTORY_ID;

    /**
     * Identifies the sample version at which this file version was originally
     * created. This is typically the same as {@code firstSampleHistoryId}
     * except in cases where reversion (re)creates a file where it is set to the
     * {@code originalSampleHistoryId} of the file that existed at the version
     * to which this sample was reverted.
     */
    public int originalSampleHistoryId
            = SampleHistoryInfo.INVALID_SAMPLE_HISTORY_ID;

    /** The name of the data file, absent any path components. */
    public String fileName = null;

    /**
     * The revision identifier CVS uses to identify the file/version described
     * by this object, for instance {@code 1.1}, {@code 1.2}, etc.
     */
    public String cvsRevision = null;

    /**
     * The number of data bytes contained within the file/version, for
     * informational purposes only.
     */
    public long fileBytes = 0;

    /** The description of the file/version. */
    public String description = null;

    /**
     * Initializes a new {@code RepositoryFileInfo} with default attributes;
     * permits transmission of instances over RMI
     */
    public RepositoryFileInfo() {
        // Nothing to do
    }

    /**
     * Initializes a new {@code RepositoryFileInfo} with the specified
     * file-specific information. Specification of sample workflow details is
     * deferred; the new object will be unsuitable for DB insertion until the
     * {@link #firstSampleHistoryId} and {@link #originalSampleHistoryId} (at
     * minimum) are also set.
     */
    public RepositoryFileInfo(int sampleId, String fileName,
            String cvsRevision, long fileBytes, String description) {
        this.sampleId = sampleId;
        this.fileName = fileName;
        this.cvsRevision = cvsRevision;
        this.fileBytes = fileBytes;
        this.description = description;
    }

    /**
     * Constructor to create this object from the current record in a db
     * resultset.
     */
    public RepositoryFileInfo(ResultSet rs) throws SQLException {
        id = rs.getInt("id");
        sampleId = rs.getInt("sample_id");
        firstSampleHistoryId = rs.getInt("first_sampleHistory_id");
        lastSampleHistoryId = rs.getInt("last_sampleHistory_id");
        if (rs.wasNull()) {
            lastSampleHistoryId = SampleHistoryInfo.STILL_ACTIVE;
        }
        originalSampleHistoryId = rs.getInt("original_sampleHistory_id");
        fileName = rs.getString("fileName");
        cvsRevision = rs.getString("cvsRevision");
        fileBytes = rs.getLong("fileBytes");
        description = rs.getString("description");
    }

    /** Store this object in the current row of the provided db resultset */
    public void dbStore(ResultSet rs) throws SQLException {
        if (id != INVALID_REPOSITORY_FILE_ID) {
            rs.updateInt("id", id);
        } else {
            rs.updateNull("id");
        }
        rs.updateInt("sample_id", sampleId);
        rs.updateInt("first_sampleHistory_id", firstSampleHistoryId);
        if (lastSampleHistoryId != SampleHistoryInfo.STILL_ACTIVE) {
            rs.updateInt("last_sampleHistory_id", lastSampleHistoryId);
        } else {
            rs.updateNull("last_sampleHistory_id");
        }
        rs.updateInt("original_sampleHistory_id", originalSampleHistoryId);
        rs.updateString("fileName", fileName);
        rs.updateString("cvsRevision", cvsRevision);
        rs.updateLong("fileBytes", fileBytes);
        rs.updateString("description", description);
    }
}
