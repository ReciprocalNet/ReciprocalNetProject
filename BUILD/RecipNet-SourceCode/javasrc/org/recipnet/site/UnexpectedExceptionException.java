/*
 * Reciprocal Net Project
 * @(#)UnexpectedExceptionException.java
 *
 * 12-Feb-2003: jobollin autogenerated skeleton source from UML model
 * 12-Feb-2003: jobollin cleaned up and completed the autogenerated source
 * 24-Mar-2003: jobollin modified the constructors as part of task #808
 */
package org.recipnet.site;

/**
 * An unchecked exception used to wrap a checked exception that are
 * declared by the API but should not be thrown in the context of the
 * application.  For instance, a <code>CloneNotSupportedException</code>
 * thrown by foo.clone() when foo is &quot;known&quot; to be a
 * <code>Cloneable</code>.  This exception differs from
 * java.rmi.UnexpectedException principally in that it is an
 * <em>unchecked</em> exception.
 */
public class UnexpectedExceptionException extends RuntimeException {
    
    /**
     * Creates a new <code>UnexpectedExceptionException</code>
     */
    public  UnexpectedExceptionException() {
        super();
    }
    
    /**
     * Creates a new <code>UnexpectedExceptionException</code> with the
     * specified cause
     *
     * @param cause the <code>Throwable</code> cause of this exception
     */
    public  UnexpectedExceptionException(Throwable cause) {
        super(cause);
    }
    
    /**
     * Creates a new <code>UnexpectedExceptionException</code> with the
     * specified detail message and cause
     *
     * @param message the detail message for this exception
     * @param cause The <code>Throwable</code> cause of this exception
     */
    public  UnexpectedExceptionException(String message, Throwable cause) {
        super(message, cause);
    }
    
}
