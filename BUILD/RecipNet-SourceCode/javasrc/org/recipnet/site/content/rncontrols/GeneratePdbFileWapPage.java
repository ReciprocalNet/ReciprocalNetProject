/*
 * Reciprocal Net Project
 *
 * GeneratePdbFileWapPage.java
 *
 * 20-Jan-2006: jobollin wrote first draft
 */

package org.recipnet.site.content.rncontrols;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.rmi.RemoteException;
import java.text.ParseException;

import javax.servlet.jsp.JspException;

import org.recipnet.common.controls.EvaluationAbortedException;
import org.recipnet.common.controls.HtmlPage;
import org.recipnet.common.files.CrtFile;
import org.recipnet.common.files.PdbFile;
import org.recipnet.common.molecule.Atom;
import org.recipnet.site.InconsistentDbException;
import org.recipnet.site.InvalidDataException;
import org.recipnet.site.OperationFailedException;
import org.recipnet.site.OperationNotPermittedException;
import org.recipnet.site.shared.bl.SampleWorkflowBL;
import org.recipnet.site.wrapper.CoreConnector;
import org.recipnet.site.wrapper.RepositoryFileInputStream;
import org.recipnet.site.wrapper.RepositoryFileOutputStream;

/**
 * A {@code FileWapPage} whose workflow action is PDB file generation (into the
 * file repository) based on the CRT file on which this page is directed to
 * operate.
 * 
 * @author  jobollin
 * @version 0.9.0
 */
public class GeneratePdbFileWapPage extends FileWapPage {
    
    /**
     * An {@code ErrorSupplier} error flag that signals an unparseable CRT file
     */
    @SuppressWarnings("static-access")
    public final static int BAD_CRT = FileWapPage.getHighestErrorFlag() << 1; 
    
    /**
     * An {@code ErrorSupplier} error flag that signals an I/O exception
     * while reading the CRT file
     */
    @SuppressWarnings("static-access")
    public final static int CRT_IO_ERROR
            = FileWapPage.getHighestErrorFlag() << 2; 
    
    /**
     * An {@code ErrorSupplier} error flag that signals an I/O exception
     * while writing the PDB file
     */
    @SuppressWarnings("static-access")
    public final static int PDB_IO_ERROR
            = FileWapPage.getHighestErrorFlag() << 3; 
    
    /**
     * A required tag attribute designating the name of the PDB file to create
     * or replace; not validated at this level by this page.  For best user
     * experience it is recommended that the value be exposed and validated by
     * a control within the page. 
     */
    private String pdbFileName;
    
    /**
     * The user-supplied description to be associated with the PDB file
     * generated by this page.  This property is not exposed as a tag attribute;
     * it is expected that the page body will set it as necessary
     */
    private String fileDescription;
    
    /**
     * A {@code CrtFile} parsed from the named repository file during the
     * {@code FETCHING_PHASE}; not currently exposed outside this class 
     */
    private CrtFile<Atom> crtFile;

    /**
     * {@inheritDoc}
     * 
     * @see FileWapPage#reset()
     */
    @Override
    protected void reset() {
        super.reset();
        pdbFileName = null;
        fileDescription = null;
    }

    /**
     * {@inheritDoc}.  This version then exposes this tag as a scripting
     * variable 'pdbPage', to which the TLD assigns an appropriate type.
     *
     * @see RecipnetPage#doStartTag()
     */
    @Override
    public int doStartTag() throws JspException {
        int rc = super.doStartTag();
        
        pageContext.setAttribute("pdbPage", this);
        
        return rc;
    }

    /**
     * {@inheritDoc}.  This version removes the 'pdbPage' scripting variable
     * before delegating to the superclass.
     * 
     * @see HtmlPage#doEndTag()
     */
    @Override
    public int doEndTag() throws JspException {
        pageContext.removeAttribute("pdbPage");
        
        return super.doEndTag();
    }

    /**
     * Retrieves the PDB file name configured on this page
     * 
     * @return the PDB file name as a {@code String}
     */
    public String getPdbFileName() {
        return pdbFileName;
    }

    /**
     * Sets the name of the PDB file to be generated by this page
     * 
     * @param  pdbFileName the file name as a {@code String}
     */
    public void setPdbFileName(String pdbFileName) {
        this.pdbFileName = pdbFileName;
    }

    /**
     * Retrieves the file description currently configured on this page
     * 
     * @return the file description as a {@code String}
     */
    public String getFileDescription() {
        return fileDescription;
    }

    /**
     * Sets the file description for the PDB file to be created by this page
     * 
     * @param  fileDescription a {@code String} containing the file description
     */
    public void setFileDescription(String fileDescription) {
        this.fileDescription = fileDescription;
    }

    /**
     * Returns the workflow action code for the action to be performed by this
     * WAP; one of {@code SampleWorkflowBL.FILE_ADDED} and
     * {@code SampleWorkflowBL.SUBSTITUTE_FILE_ADDED_OR_FILE_REPLACED}.  The
     * specific code depends on whether this page is configured to replace
     * existing files, which may vary from phase to phase.
     * 
     * @return the workflow action code for this page
     * 
     * @see WapPage#getWorkflowActionCode()
     */
    @Override
    public int getWorkflowActionCode() {
        return SampleWorkflowBL.SUBSTITUTE_FILE_ADDED_OR_FILE_REPLACED;
    }

    /**
     * {@inheritDoc}.  This version always throws an
     * {@code IllegalStateException} because the workflow action code is fixed.
     *  
     * @see WapPage#setWorkflowActionCode(int)
     */
    @Override
    public void setWorkflowActionCode(@SuppressWarnings("unused") int code) {
        throw new IllegalStateException(
                "Cannot set the workflow action code directly");
    }

    /**
     * Performs processing prior to evaluation of the page body.  This version
     * first delegates to the superclass's method, then, on
     * {@code FETCHING_PHASE}, parses the specified CRT file. 
     *  
     * @see FileWapPage#doBeforePageBody()
     */
    @Override
    protected void doBeforePageBody()
            throws JspException, EvaluationAbortedException {
        super.doBeforePageBody();
        
        switch (getPhase()) {
            case HtmlPage.FETCHING_PHASE:
                CoreConnector cc = CoreConnector.extract(
                        pageContext.getServletContext());
                
                try {
                    int ticket = cc.getRepositoryManager().beginReadingDataFile(
                            getSampleInfo().id,
                            getSampleInfo().historyId,
                            getSampleDataFile().getName(),
                            getUserInfo().id);
                    
                    Reader crtReader = new InputStreamReader(
                            new RepositoryFileInputStream(cc, ticket),
                            "UTF-8");
                    
                    try {
                        crtFile = CrtFile.readFrom(crtReader);
                    } finally {
                        try {
                            crtReader.close();
                        } catch (IOException ioe) {
                            // Do nothing
                        }
                    }
                } catch (OperationFailedException ofe) {
                    // Couldn't get a ticket for some low-level reason
                    throw new JspException(ofe);
                } catch (InconsistentDbException ide) {
                    // There is a database inconsistency
                    throw new JspException(ide);
                } catch (UnsupportedEncodingException uee) {
                    // Cannot happen because UTF-8 is required to be supported
                    assert false;
                } catch (ParseException e) {
                    // Could not parse CRT
                    setErrorFlag(BAD_CRT);
                } catch (RemoteException re) {
                    // The RepositoryFileInputStream should already have
                    // reported the error
                    throw new JspException(re);
                } catch (IOException e) {
                    // Other I/O error while reading the CRT
                    setErrorFlag(CRT_IO_ERROR);
                }
                break;
        }
    }

    /**
     * Performs the PDB-generation action represented by this page
     * 
     * @see FileWapPage#performWorkflowAction()
     */
    @Override
    protected boolean performWorkflowAction()
            throws JspException, EvaluationAbortedException {
        if (!areAllFieldsValid()) {
            return false;
        }
        CoreConnector cc
                = CoreConnector.extract(pageContext.getServletContext());
        
        try {
            int ticket = cc.getRepositoryManager().beginWritingDataFile(
                    getSampleInfo(), getPdbFileName(), true, true,
                    getWorkflowActionCode(),
                    getUserInfo().id, getComments(),
                    getProcessedFileDescription()
                    );
            
            Writer writer = new OutputStreamWriter(
                    new RepositoryFileOutputStream(cc, ticket), "UTF-8");

            try {
                PdbFile<Atom> pdbFile = new PdbFile<Atom>(
                        crtFile.getModel(), crtFile.getName());
                
                pdbFile.writeTo(writer);
                writer.flush();
            } finally {
                try {
                    writer.close();
                } catch (IOException ioe) {
                    // ignore it
                }
            }
            
            redirectToEditSamplePage();
            abort();
            return true;
        } catch (RemoteException re) {
            cc.reportRemoteException(re);
            throw new JspException(re);
        } catch (IOException e) {
            setErrorFlag(PDB_IO_ERROR);
        } catch (InvalidDataException ide) {
            throw new JspException(ide);
        } catch (OperationFailedException ofe) {
            throw new JspException(ofe);
        } catch (OperationNotPermittedException onpe) {
            throw new JspException(onpe);
        }

        return false;
    }

    /**
     * Returns a value of the file description that has been massaged for
     * storage in the DB.  Specifically, if the configured file description is
     * {@code null}, blank, or empty then this method returns {@code null};
     * otherwise, it returns the trimmed value of the configured description.
     * 
     * @return the file description {@code String}, processed as described
     */
    private String getProcessedFileDescription() {
        String description = getFileDescription();
        
        if (description != null) {
            description = description.trim();
        }
        
        return "".equals(description) ? null : description;
    }

    /**
     * Returns the numerically largest error code defined by this
     * {@code ErrorSupplier}, to facilitate subclasses defining their own error
     * codes
     * 
     * @return the numerically greatest error code implemented by this error
     *         supplier
     */
    protected static int getHighestErrorFlag() {
        return PDB_IO_ERROR;
    }
}
