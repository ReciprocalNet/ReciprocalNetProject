/*
 * Reciprocal Net Project
 * @(#)WrongSiteException.java
 *
 * 12-Feb-2003: jobollin autogenerated skeleton source from UML model
 * 12-Feb-2003: jobollin cleaned up and completed the autogenerated source
 * 07-Jan-2004: ekoperda changed package references to match source tree
 *              reorganization
 */

package org.recipnet.site.core;
import org.recipnet.site.OperationNotPermittedException;
import org.recipnet.site.shared.db.ContainerObject;

/**
 * An <code>OperationNotPermittedException</code> subclass for use when the
 * requested operation is or requires a modifcation to site data for a
 * different site than the one servicing the request, or in some cases when
 * the operation requires simple retrieval of such site data.
 */
public class WrongSiteException extends OperationNotPermittedException {
    
    /**
     * Creates a new <code>WrongSiteException</code>
     */
    public  WrongSiteException() {
        this(null, null);
    }
    
    /**
     * Creates a new <code>ResourceNotFoundException</code> with the specified
     * resource type and identifier
     *
     * @param foreignObject the <code>ContainerObject</code> representing the
     * entity that could not be created, modified, or retrieved because it
     * belongs to a different site
     */
    public  WrongSiteException(ContainerObject foreignObject) {
        this(null, foreignObject);
    }
    
    /**
     * Creates a new <code>ResourceNotFoundException</code> with the specified
     * detail message, resource type code, and resource identifier
     *
     * @param message the detail message for this exception
     * @param foreignObject the <code>ContainerObject</code> representing the
     * entity that could not be created, modified, or retrieved because it
     * belongs to a different site
     */
    public  WrongSiteException(String message, ContainerObject foreignObject) {
        super(message, foreignObject);
    }
    
    /**
     * Returns the <code>ContainerObject</code> representing the entity that
     * could not be created, updated, or retrieved because it belongs to a
     * different site
     *
     * @return the foreign <code>ContainerObject</code>
     */
    public ContainerObject getForeignObject() {
        return (ContainerObject) getObject();
    }
    
}
