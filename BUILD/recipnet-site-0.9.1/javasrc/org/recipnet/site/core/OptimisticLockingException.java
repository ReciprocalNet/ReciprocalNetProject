/*
 * Reciprocal Net Project
 * @(#)OptimisticLockingException.java
 *
 * 12-Feb-2003: jobollin autogenerated skeleton source from UML model
 * 12-Feb-2003: jobollin cleaned up and completed the autogenerated source
 * 07-Jan-2004: ekoperda changed package references to match source tree
 *              reorganization
 */
package org.recipnet.site.core;
import org.recipnet.site.OperationFailedException;
import org.recipnet.site.shared.db.ContainerObject;

/**
 * An <code>OperationFailedException</code> subclass thrown when an attempt
 * is made to modify a resource based on an out of date original version
 */
public class OptimisticLockingException extends OperationFailedException {
    
    /**
     * The container containing update data that could not be applied because
     * of the optimistic locking violation
     */
    private ContainerObject data;
    
    /**
     * Creates a new <code>OptimisticLockingException</code>
     */
    public  OptimisticLockingException() {
        this(null, null);
    }
    
    /**
     * Creates a new <code>OptimisticLockingException</code> with the specified
     * detail message
     *
     * @param message the detail message for this exception
     */
    public  OptimisticLockingException(String message) {
        this(message, null);
    }
    
    /**
     * Creates a new <code>OptimisticLockingException</code> with the specified
     * <code>ContainerObject</code> containing the unapplied update data
     *
     * @param data a <code>ContainerObject</code> containing the unapplied
     * update data
     */
    public  OptimisticLockingException(ContainerObject data) {
        this(null, data);
    }
    
    /**
     * Creates a new <code>OptimisticLockingException</code> with the specified
     * detail message and <code>ContainerObject</code> containing the unapplied
     * update data
     *
     * @param message the detail message for this exception
     * @param data a <code>ContainerObject</code> containing the unapplied
     * update data
     */
    public  OptimisticLockingException(String message, ContainerObject data) {
        super(message);
	this.data = data;
    }
    
    /**
     * Returns the container containing update data that could not be applied
     * because of the optimistic locking violation
     *
     * @return a <code>ContainerObject</code> with the update data
     * that could not be applied
     */
    public ContainerObject getData() {
        return data;
    }
    
}
