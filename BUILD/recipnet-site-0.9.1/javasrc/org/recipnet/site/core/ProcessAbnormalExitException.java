/*
 * Reciprocal Net Project
 * @(#)ProcessAbnormalExitException.java
 *
 * 23-May-2003: ekoperda wrote first draft
 * 03-Jul-2003: ekoperda made class serializable and added writeObject() to fix
 *              bug #963
 */
package org.recipnet.site.core;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import org.recipnet.site.OperationFailedException;

/**
 * An <code>OperationFailedException</code> subclass that may be thrown
 * when a caller spawns an external process and that external process
 * terminates with an abnormal (i.e. nonzero) exit code.  Contains a reference
 * to the related Process object and optionally its captured output text and 
 * captured error text.  This exception is serializable, but the 
 * <code>process</code> field is not persisted across serialization because 
 * <code>Process</code> objects are not serializable.
 */
public class ProcessAbnormalExitException extends OperationFailedException 
        implements Serializable {

    /**
     * If not <code>null</code>, the <code>Process</code> object representing
     * the process that terminated abnormally.  This value is always null if
     * this object has been deserialized.
     */
    private Process process;
    
    /**
     * If not <code>null</code>, the output text generated by the process
     * (written to stdout) during its execution.
     */
    private String capturedOutputText;

    /**
     * If not <code>null</code>, the error text generated by the process
     * (written to stderr) during its execution.
     */
    private String capturedErrorText;

    /**
     * Creates a new <code>ProcessAbnormalExitException</code> with the 
     * specified process, output text, and error text.
     *
     * @param process the </code>Process<code> that exited abnormally.
     * @param capturedOutputText the output text generated by the process,
     *     or null.
     * @param capturedErrorText the error text generated by the process, or
     *     null.
     */
    public ProcessAbnormalExitException(Process process, 
            String capturedOutputText, String capturedErrorText) {
	super((Throwable) null);
	this.process = process;
	this.capturedOutputText = capturedOutputText;
	this.capturedErrorText = capturedErrorText;
    }
    
    /**
     * @return the <code>Process</code> representing the process that exited
     *     abormally.  This value is always null if this object has been
     *     deserialized.
     */
    public Process getProcess() {
        return process;
    }

    /** @return the output text generated by the process. */
    public String getCapturedOutputText() {
	return capturedOutputText;
    }
    
    /** @return the error text generated by the process. */
    public String getCapturedErrorText() {
	return capturedErrorText;
    }

    /** Custom serialization handler */
    private void writeObject(ObjectOutputStream out) throws IOException {
	// Process objects are not serializable.  Hide the process value 
	// temporarily to keep the serialization engine from choking.
	Process tempProcess = this.process;
	this.process = null;

	// Invoke the default serialization handler.
	out.defaultWriteObject();

	// Reset the process value.
	this.process = tempProcess;
    }
}
