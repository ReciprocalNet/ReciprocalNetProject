/*
 * Reciprocal Net Project
 * 
 * IntersiteException.java
 *
 * 12-Feb-2003: jobollin autogenerated skeleton source from UML model
 * 12-Feb-2003: jobollin cleaned up and completed the autogenerated source
 * 07-Jan-2004: ekoperda changed package references to match source tree
 *              reorganization
 * 26-May-2006: jobollin performed minor cleanup
 */

package org.recipnet.site.core;

import org.recipnet.site.OperationFailedException;
import org.recipnet.site.shared.db.SiteInfo;

/**
 * An {@code OperationFailedException} subclass for use when an error with the
 * mechanics of an intersite conversation. Exceptions of this type are generally
 * not meaningful outside of the core and should not be thrown to remote clients
 */
public class IntersiteException extends OperationFailedException {

    /**
     * The site id of the remote site with which there was a communication
     * failure
     */
    private int siteId;

    /**
     * The IP address or host name of the site with which there was a
     * communication failure
     */
    private String systemAddress;

    /**
     * An {@code Object}, provided by the remote system, that is related to the
     * exceptional condition
     */
    private Object foreignObject;

    /**
     * Creates a new {@code IntersiteException}
     */
    public IntersiteException() {
        this(null, SiteInfo.INVALID_SITE_ID, null, null);
    }

    /**
     * Creates a new {@code IntersiteException} with the specified detail
     * message
     * 
     * @param message the detail message for this exception
     */
    public IntersiteException(String message) {
        this(message, SiteInfo.INVALID_SITE_ID, null, null);
    }

    /**
     * Creates an {@code IntersiteException} with the specified site id and
     * remote system address
     * 
     * @param siteId the id of the remote site; may be
     *        {@code org.recipnet.site.container.SiteInfo.INVALID_SITE_ID} if
     *        the site id is unknown or does not exist
     * @param address a {@code String} containing the IP address or host name of
     *        the remote system with which communication failed; may be
     *        {@code null} if unknown
     * @param obj an {@code Object}, provided by the remote site; the use of
     *        this object will depend on the context, and it may be {@code null}
     * @see org.recipnet.site.shared.db.SiteInfo SiteInfo
     */
    public IntersiteException(int siteId, String address, Object obj) {
        this(null, siteId, address, obj);
    }

    /**
     * Creates a new {@code IntersiteException} with the specified detail
     * message, site id, and remote system address
     * 
     * @param message the detail message for this exception
     * @param siteId the id of the Reciprocal Net site with which communication
     *        failed, or org.recipnet.site.container.SiteInfo.INVALID_SITE_ID if
     *        not known or non-existant
     * @param address a {@code String} containing the IP address or host name of
     *        the remote system with which communication failed
     * @param obj an {@code Object}, provided by the remote site; the use of
     *        this object will depend on the context, and it may be {@code null}
     * @see org.recipnet.site.shared.db.SiteInfo SiteInfo
     */
    public IntersiteException(String message, int siteId, String address,
            Object obj) {
        super(message);
        this.siteId = siteId;
        systemAddress = address;
        foreignObject = obj;
    }

    /**
     * Retrieves the site id of the remote site with which there was a
     * communication failure
     * 
     * @return the site id, or
     *         {@code org.recipnet.site.container.SiteInfo.INVALID_SITE_ID} if
     *         the id was not known or the system not recognized as a valid site
     */
    public int getSiteId() {
        return siteId;
    }

    /**
     * Sets the site id of the remote site with which there was a communication
     * failure; this information might not be known in the context in which this
     * exception was constructed, thus this method can be used to add it at a
     * higher level
     * 
     * @param siteId the site ID
     */
    public void setSiteId(int siteId) {
        this.siteId = siteId;
    }

    /**
     * Retrieves a {@code String} containing the IP number or host name of the
     * system with which there was a communication failure
     * 
     * @return a {@code String} containing the remote system's address, or
     *         {@code null} if the address is unknown or was not recorded
     */
    public String getSystemAddress() {
        return systemAddress;
    }

    /**
     * Returns the {@code Object} provided by the remote system that is related
     * to the exceptional condition
     * 
     * @return the {@code Object} provided by the remote system, or {@code null}
     *         if none is available
     */
    public Object getForeignObject() {
        return foreignObject;
    }

}
