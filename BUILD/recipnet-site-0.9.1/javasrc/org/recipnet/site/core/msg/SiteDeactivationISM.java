/*
 * Reciprocal Net project
 * @(#)SiteDeactivationISM.java
 *
 * 15-Jul-2002: ekoperda wrote first draft
 * 27-Sep-2002: ekoperda added support for serialization to/from XML and also
 *              moved the class into the core.msg package, from the container
 *              package
 * 07-Jan-2004: ekoperda changed package references to match source tree
 *              reorganization
 * 26-Nov-2008: ekoperda added field finalSeqNum
 */

package org.recipnet.site.core.msg;
import java.util.Date;
import org.recipnet.site.shared.DomUtil;
import org.recipnet.site.shared.db.SiteInfo;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.xml.sax.SAXException;

/**
 * Inter-site message that is sent from the Reciprocal Net coordinator
 * to all sites whenever a previously existing site has left the network.  The
 * row in the 'sites' table corresponding to this site id should be updated to
 * reflect the site's final ISM sequence number.  Once that final ISM has been
 * processed, the site's record should be marked inactive.
 *
 * Note that despite other behavior in previous releases, beginning with site
 * software 0.9.1 it is not proper to delete any site records in response to
 * this message.
 */
public class SiteDeactivationISM extends InterSiteMessage {    
    /**
     * Identifies the site being deactivated.
     */
    public int oldSiteId;

    /**
     * Identifies the sequence number of the deactivated site's final ISM.  
     * Other sites are obligated to continue processing ISM's from the
     * deactivated site until they reach this sequence number.
     *
     * This field is logically required in all ISM's generated by site software
     * 0.9.1 and beyond.  However, the code in this class treats this field as
     * optional because older ISM's may not have included it.  This field is 
     * set to the special value INVALID_SEQ_NUM in those cases.
     */
    public long finalSeqNum;

    /** Default constructor */
    public SiteDeactivationISM() {
	super();
	oldSiteId = SiteInfo.INVALID_SITE_ID;
	finalSeqNum = INVALID_SEQ_NUM;
    }

    /** 
     * Creates a new message and completely fills its members (for 
     * convenience).  This constructor is useful only to the Reciprocal
     * Net Coordinator, because he is the only entity who may transmit this
     * message.
     */
    public SiteDeactivationISM(int oldSiteId, long finalSeqNum) {
	super();
	this.sourceSiteId = InterSiteMessage.RECIPROCAL_NET_COORDINATOR;
	this.sourceDate = new Date();
	this.destSiteId = InterSiteMessage.ALL_SITES;
	this.deliverToSiteManager = true;
	this.oldSiteId = oldSiteId;
	this.finalSeqNum = finalSeqNum;
    }

    /**
     * From interface DomTreeParticipant, overrides function on
     * InterSiteMessage.
     */
    @Override
    public Node insertIntoDom(Document doc, Node base) {
	Node realParent = super.insertIntoDom(doc, base);
	DomUtil.createTextEl(realParent, "siteId", 
                Integer.toString(this.oldSiteId));
	DomUtil.createTextEl(realParent, "finalSeqNum",
	        Long.toString(this.finalSeqNum));
	return realParent;
    }

    /**
     * From interface DomTreeParticipant, overrides function on 
     * InterSiteMessage.
     */
    @Override
    public Node extractFromDom(Document doc, Node base) throws SAXException {
	Element realParent = (Element) super.extractFromDom(doc, base);
	this.oldSiteId = DomUtil.getTextForElAsInt(realParent, "siteId");
	this.finalSeqNum = DomUtil.getTextForElAsLong(realParent, 
                "finalSeqNum", INVALID_SEQ_NUM);
	return realParent;
    }	
}
