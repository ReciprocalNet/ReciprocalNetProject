/*
 * Reciprocal Net Project
 * 
 * RecipnetException.java
 *
 * 12-Feb-2003: jobollin autogenerated skeleton source from UML model
 * 12-Feb-2003: jobollin cleaned up and completed the autogenerated source
 * 24-Mar-2003: jobollin modified the constructors as part of task #808
 * 06-Jul-2006: jobollin made this class compatible with Java 1.1
 * 01-Nov-2006: jobollin made the lock object serializable
 */

package org.recipnet.site;

import java.io.Serializable;

/**
 * The superclass for all checked exceptions specific to the Reciprocal Net
 * site software
 */
public class RecipnetException extends Exception {
    
    /*
     * Subclasses of this class are used by some of the JaMM applets, therefore
     * this class must be source-compatible with Java 1.1. We nevertheless want
     * to provide Java 1.4 exception chaining, at least for the Java 1.4+
     * classes, so the constructors need a way to initialize the cause. To
     * support that, we provide methods getCause() and initCause() with
     * signatures and behavior matching those of the like-named methods provided
     * by java.lang.Throwable in Java 1.4+. When this class is used in a 1.4+
     * environment, these methods override their counterparts on the Throwable
     * class; in other environments, they don't. They don't in any case rely on
     * support from the superclass.
     */
    
    /**
     * The {@code Throwable} cause (which may be {@code null}) initialized on
     * this delegate, or {@code null} if none has been set
     */
    private Throwable causeThrowable;
    
    /**
     * A flag indicating whether this delegate's cause has been initialized;
     * necessary for correct behavior when the cause is initialized to
     * {@code null}
     */
    private boolean isInitialized;
    
    /**
     * An object used exclusively to provide a monitor for synchronizing
     * operations; must be Serializable, but the specific class doesn't matter
     */
    private final Serializable lock = new String("");

    /**
     * Creates a new {@code RecipnetException}
     */
    public  RecipnetException() {
        super();
    }
    
    /**
     * Creates a new {@code RecipnetException} with the specified detail
     * message
     *
     * @param message the detail message for this exception
     */
    public  RecipnetException(String message) {
        super(message);
    }
    
    /**
     * Creates a {@code RecipnetException} with the specified cause
     *
     * @param cause the {@code Throwable} cause of this exception; may be
     * {@code null}
     */
    public  RecipnetException(Throwable cause) {
        super();
        initCause(cause);
    }
    
    /**
     * Creates a new {@code RecipnetException} with the specified detail
     * message and cause
     *
     * @param message the detail message for this exception
     * @param cause the {@code Throwable} cause of this exception, if any;
     * may be {@code null}
     */
    public  RecipnetException(String message, Throwable cause) {
        this(message);
        initCause(cause);
    }
    
    /**
     * Retrieves the {@code Throwable} cause initialized on this object
     *
     * @return the {@code Throwable} cause initialized on this
     *         {@code CauseDelegate} via a previous invocation of
     *         {@link #initCause(Throwable)}, or {@code null} if none has
     *         been set
     */
    public Throwable getCause() {
        synchronized (lock) {
            return causeThrowable;
        }
    }

    /**
     * Initializes the {@code Throwable} cause of the object associated with
     * this delegate.  This method may be invoked at most once without causing
     * an exception to be thrown 
     *
     * @param cause the {@code Throwable} cause with which this object is to
     *        initialize its associated {@code Throwable}
     *        
     * @return the {@code Throwable} associated with and initialized by this
     *         {@code CauseDelegate}
     *         
     * @throws IllegalArgumentException if the specified cause is the
     *         {@code Throwable} object associated with this
     *         {@code CauseDelegate}
     * @throws IllegalStateException if this {@code CauseDelegate} has already
     *         been initialized 
     */
    public Throwable initCause(Throwable cause) {
        synchronized (lock) {
            if (isInitialized) {
                throw new IllegalStateException(
                        "The cause is already initialized");
            } else if (cause == this) {
                throw new IllegalArgumentException(
                "A Throwable cannot cause itself");
            } else {
                isInitialized = true;
                this.causeThrowable = cause;
            }
        }
        
        return this;
    }
}
