/*
 * Reciprocal Net project
 * 
 * SummarySearch.java
 * 
 * 06-Jun-2005: midurbin wrote first draft
 * 10-Jun-2005: midurbin updated class to reflect UserPreferencesBL name change
 * 22-Jun-2005: midurbin fixed bug #1618 in getPageCount()
 * 14-Jun-2006: jobollin reformatted the source
 */

package org.recipnet.site.content.rncontrols;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.GregorianCalendar;
import java.util.Map;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.PageContext;
import org.recipnet.common.controls.HtmlPage;
import org.recipnet.common.controls.HtmlPageElement;
import org.recipnet.common.controls.PaginationContext;
import org.recipnet.site.OperationFailedException;
import org.recipnet.site.RecipnetException;
import org.recipnet.site.shared.SearchParams;
import org.recipnet.site.shared.UserPreferences;
import org.recipnet.site.shared.bl.AuthorizationCheckerBL;
import org.recipnet.site.shared.bl.SampleWorkflowBL;
import org.recipnet.site.shared.bl.UserBL;
import org.recipnet.site.shared.db.SampleInfo;
import org.recipnet.site.shared.db.UserInfo;
import org.recipnet.site.shared.search.ActionDateSC;
import org.recipnet.site.shared.search.LabSC;
import org.recipnet.site.shared.search.SearchConstraint;
import org.recipnet.site.shared.search.SearchConstraintGroup;
import org.recipnet.site.shared.search.StatusSC;
import org.recipnet.site.wrapper.CoreConnector;

/**
 * <p>
 * A custom tag that implements the {@code SearchResultsContext} and
 * {@code PaginationContext} to expose recently modified samples for a single
 * lab.
 * </p><p>
 * If the JSP author specifies a status code for the 'statusCode' property, this
 * tag will provide search results for a search for all samples at the current
 * lab with the given status in order from the most recently modified to the
 * least recently modified. This tag will also provide a pagination context
 * indicating the number of search results specified by the preferences of the
 * currently logged-in user. This preference may be changed if the
 * 'setSummarySamplesPrefParamName' property is set to a parameter name of a
 * request parameter that contains the new desired value.
 * </p><p>
 * If the JSP author does not specify a status code, this tag will provide
 * search results for the search of all of the samples modified within a
 * particular number of days. This number is determined by consulting the
 * preferences for the currently logged-in user, and the result are sorted in
 * order from the most recently modified to the least recently modified. This
 * preference may be changed if the 'setSummaryDaysPrefParamName' property is
 * set to a parameter name of a request parameter that contains the new desired
 * value.
 * </p><p>
 * This tag must be nested within a {@code LabContext} for the lab that will
 * have its summary search exposed.
 * </p><p>
 * To limit the number of samples included in this search, the JSP author may
 * set the 'maxSearchResultsToInclude' property. In such cases the preferred
 * number of samples will be limited if it exceeds this value. Furthermore, if
 * it desirable to ignore the user's preference, the
 * 'ignorePreferredResultLimit' property may be set to true and all samples (up
 * to 'maxSearchResultsToInclude') will be included.
 * </p><p>
 * Unlike other {@code PaginationContext} implementations, this tag has no
 * mechanism to indicate the the page and will always display the first page of
 * results. The page size is determined based on user preferences (but limited
 * by 'maxSearchResultsToInclude') as indicated above. The element count and
 * other functionality will work as expected as long as it is understood that
 * page navigation is not an option. These constraints are consistent with the
 * intended use of this tag on /lab/summary.jsp, but could easily be transcended
 * with the addition of paging control properties.
 * </p>
 */
public class SummarySearch extends HtmlPageElement implements
        SearchResultsContext, PaginationContext {

    /**
     * A reference to the {@code LabContext} in which this tag must be nested
     * that represents the lab whose summary search is being generated by this
     * tag. This value is determined during the {@code REGISTRATION_PHASE}.
     */
    private LabContext labContext;

    /**
     * An optional property that when set to a valid status code indicates that
     * this tag's {@code SearchResultsContext} is to represent a search for
     * samples with the given status code, restricted to the number of samples
     * indicated for status searches by the user's preferences. If this value is
     * equal to {@code INVALID_STATUS} (the default value), this
     * {@code SearchResultsContext} is to represent a search for samples that
     * have been modified recently. Only samples modified within the number of
     * days specified by the user's preferences will be included.
     */
    private int statusCode;

    /**
     * An optional property that indicates the name of a request parameter that
     * when set, is to be considered to be the new preferred number of days from
     * which to include samples when 'statusCode' is equal to
     * {@code INVALID_STATUS}. This preference for the currently logged-in user
     * will be updated immediately and will apply to all subsequent
     * {@code SummarySearch} tags. The preference value is returned by
     * {@code getPageSize()} unless it is overruled by another property.
     */
    private String setSummaryDaysPrefParamName;

    /**
     * An optional property that indicates the name of a request parameter that
     * when set, is to be considered to be the new preferred number of samples
     * to display for each status search. This preference for the currently
     * logged-in user will be updated immediately and will apply to all
     * subsequent tags where a valid 'statusCode' is provided. The preference
     * value is returned by {@code getPageSize()} unless it is overruled by
     * another property.
     */
    private String setSummarySamplesPrefParamName;

    /**
     * An optional property that defaults to 50 and indicates the maximum number
     * of samples to fetch from this {@code SearchResultsContext}. In the even
     * that a nested tag requests more than this number of resuls an exception
     * will be thrown. Furthermore, even if the user's preferences suggest that
     * a larger number of samples should be included, {@code getPageSize()} will
     * never return a value higher than this property's value. If this property
     * is set to 0, there will be no limit on the number of samples included.
     * This is NOT recommended.
     */
    private int maxSearchResultsToInclude;

    /**
     * An optional property that when set to true, indicates that the preferred
     * number of days or samples should be ignored, and {@code getPageSize()}
     * should always return the value of the 'maxSearchResultsToInclude'
     * property.
     */
    private boolean ignorePreferredResultLimit;

    /**
     * The search results fetched by {@code onFetchingPhaseBeforeBody()} that
     * are used to determine information needed by the {@code PaginationContext}
     * implementation as well as all the expected calls to
     * {@code SearchResultsContext} methods.
     */
    private Collection<SampleInfo> cachedSearchResults;

    /** The total number of search results */
    private int resultCount;

    /**
     * The number of samples that match the criteria defined by this tag if
     * 'statusCode' is invalid or the value of the user's preferred amount of
     * samples when this is a status search. If this value would be greater than
     * 'maxSearchResultsToInclude', it is overruled to be equal to
     * 'maxSearchResultsToInclude'.
     */
    private int pageSize;

    /** {@inheritDoc} */
    @Override
    protected void reset() {
        super.reset();
        this.labContext = null;
        this.statusCode = SampleWorkflowBL.INVALID_STATUS;
        this.setSummaryDaysPrefParamName = null;
        this.setSummarySamplesPrefParamName = null;
        this.maxSearchResultsToInclude = 50;
        this.ignorePreferredResultLimit = false;
        this.cachedSearchResults = null;
        this.resultCount = 0;
        this.pageSize = 0;
    }

    /**
     * Sets the 'statusCode' property.
     * 
     * @param statusCode the status code that will be required of all samples
     *        included in the search results.
     */
    public void setStatusCode(int statusCode) {
        this.statusCode = statusCode;
    }

    /**
     * Gets the 'statusCode' property.
     * 
     * @return the status code that will be required of all samples included in
     *         the search results.
     */
    public int getStatusCode() {
        return statusCode;
    }

    /**
     * Sets the 'setSummaryDaysPrefParamName' property.
     * 
     * @param paramName the name of the request parameter that if present
     *        indicates the new preferred number of days to be included in a
     *        search for recently modified samples.
     */
    public void setSetSummaryDaysPrefParamName(String paramName) {
        this.setSummaryDaysPrefParamName = paramName;
    }

    /**
     * Gets the 'setSummaryDaysPrefParamName' property.
     * 
     * @return the name of the request parameter that if present indicates the
     *         new preferred number of days to be included in a search for
     *         recently modified samples.
     */
    public String getSetSummaryDaysPrefParamName() {
        return this.setSummaryDaysPrefParamName;
    }

    /**
     * Sets the 'setSummarySamplesPrefParamName' property.
     * 
     * @param paramName the name of the request parameter that if present
     *        indicates the new preferred number of samples to be included in a
     *        search for samples of a given status.
     */
    public void setSetSummarySamplesPrefParamName(String paramName) {
        this.setSummarySamplesPrefParamName = paramName;
    }

    /**
     * Gets the 'setSummarySamplesPrefParamName' property.
     * 
     * @return the name of the request parameter that if present indicates the
     *         new preferred number of samples to be included in a search for
     *         samples of a given status.
     */
    public String getSetSummarySamplesPrefParamName() {
        return this.setSummarySamplesPrefParamName;
    }

    /**
     * Sets the 'maxSearchResultsToInclude' property.
     * 
     * @param max the maximum number of search results to allow to be requested
     *        by nested tags for the search performed by this tag.
     */
    public void setMaxSearchResultsToInclude(int max) {
        this.maxSearchResultsToInclude = max;
    }

    /**
     * Gets the 'maxSearchResultsToInclude' property.
     * 
     * @return the maximum number of search results to allow to be requested by
     *         nested tags for the search performed by this tag.
     */
    public int getMaxSearchResultsToInclude() {
        return this.maxSearchResultsToInclude;
    }

    /**
     * Sets the 'ignorePreferredResultLimit' property.
     * 
     * @param ignore if true causes the preferred sample count or day count to
     *        be ignored in favor of the 'maxSearchResultsToInclude' property's
     *        value.
     */
    public void setIgnorePreferredResultLimit(boolean ignore) {
        this.ignorePreferredResultLimit = ignore;
    }

    /**
     * Gets the 'ignorePreferredResultLimit' property.
     * 
     * @return true if the preferred sample count or day count should be ignored
     *         in favor of the 'maxSearchResultsToInclude' property's value;
     *         otherwise false.
     */
    public boolean getIgnorePreferredResultLimit() {
        return this.ignorePreferredResultLimit;
    }

    /**
     * {@inheritDoc}; this version gets a reference to the {@code LabContext}
     * and consults request parameters to update session preferences that will
     * be used by the {@code PaginationContext}.
     * 
     * @throws IllegalStateException if this tag is not nested within the
     *         appropriate contexts
     */
    @Override
    public int onRegistrationPhaseBeforeBody(PageContext pageContext)
            throws JspException {
        int rc = super.onRegistrationPhaseBeforeBody(pageContext);

        // get the LabContext
        this.labContext = findRealAncestorWithClass(this, LabContext.class);
        if (this.labContext == null) {
            throw new IllegalStateException();
        }

        return rc;
    }

    /**
     * {@inheritDoc}; this version creates, stores and performs a search based
     * on the user preferences as well as the properties of this tag.
     * 
     * @throws IllegalStateException if the {@code LabContext} provides
     *         {@code null} {@code LabInfo}.
     * @throws JspException wrapping either an RemoteException thrown because a
     *         connection could not be made to core, or a RecipnetException if
     *         one was thrown by calls to core.
     */
    @Override
    public int onFetchingPhaseBeforeBody() throws JspException {
        int rc = super.onFetchingPhaseBeforeBody();

        /*
         * Set any preferences that may be modified. Though request parameters
         * are parsed here, they are not POST parameters and therefore cannot be
         * parsed during the PARSING_PHASE
         */
        if (this.setSummarySamplesPrefParamName != null) {
            String paramValue = pageContext.getRequest().getParameter(
                    this.setSummarySamplesPrefParamName);

            try {
                UserBL.setPreference(
                        UserBL.Pref.SUMMARY_SAMPLES,
                        (UserPreferences) pageContext.getSession().getAttribute(
                                "preferences"), Integer.parseInt(paramValue));
            } catch (NumberFormatException ex) {
                // ignore the invalid or unspecified parameter
            }
        }
        if (this.setSummaryDaysPrefParamName != null) {
            String paramValue = pageContext.getRequest().getParameter(
                    this.setSummaryDaysPrefParamName);

            try {
                UserBL.setPreference(
                        UserBL.Pref.SUMMARY_DAYS,
                        (UserPreferences) pageContext.getSession().getAttribute(
                                "preferences"), Integer.parseInt(paramValue));
            } catch (NumberFormatException ex) {
                // ignore the invalid or unspecified parameter
            }
        }

        CoreConnector cc
                = CoreConnector.extract(this.pageContext.getServletContext());

        if (this.labContext.getLabInfo() == null) {
            throw new IllegalStateException();
        }
        int labId = this.labContext.getLabInfo().id;

        // create the search
        SearchParams sp;

        try {
            sp = cc.getSampleManager().getEmptySearchParams();
        } catch (RemoteException ex) {
            cc.reportRemoteException(ex);
            throw new JspException(ex);
        }
        sp.setSortOrder(SearchParams.SORTBY_CURRENT_SAMPLEHISTORY_ID_REV);
        
        Collection<SearchConstraint> constraints
                = new ArrayList<SearchConstraint>();
        
        constraints.add(new LabSC(labId));
        if (this.statusCode == SampleWorkflowBL.INVALID_STATUS) {
            // this is a recent actions search
            int daysAgo = UserBL.getPreference(
                    UserBL.Pref.SUMMARY_DAYS,
                    (UserPreferences) this.pageContext.getSession().getAttribute(
                            "preferences"));
            Calendar xDaysAgo = new GregorianCalendar();
            Calendar now = Calendar.getInstance();

            xDaysAgo.clear();
            xDaysAgo.set(now.get(Calendar.YEAR), now.get(Calendar.MONTH),
                    now.get(Calendar.DAY_OF_MONTH));
            xDaysAgo.add(Calendar.DAY_OF_MONTH, -daysAgo);
            constraints.add(new ActionDateSC(xDaysAgo.getTime(),
                    ActionDateSC.REQUIRE_ACTION_AFTER));
        } else {
            // this is a status search
            constraints.add(new StatusSC(this.statusCode));
        }
        sp.addToHeadWithAnd(new SearchConstraintGroup(
                SearchConstraintGroup.AND, constraints));

        // store the search
        AuthorizationCheckerBL.blessSearchParams(sp,
                (UserInfo) this.pageContext.getSession().getAttribute(
                        "userInfo"));
        int searchId = 0;

        try {
            searchId = cc.getSampleManager().storeSearchParams(sp);
        } catch (RemoteException ex) {
            cc.reportRemoteException(ex);
            throw new JspException(ex);
        } catch (OperationFailedException ex) {
            throw new JspException(ex);
        }

        // determine page size (number of requested search results)
        this.pageSize = UserBL.getPreference(UserBL.Pref.SUMMARY_SAMPLES,
                (UserPreferences) this.pageContext.getSession().getAttribute(
                        "preferences"));
        if ((pageSize > this.maxSearchResultsToInclude)
                || this.ignorePreferredResultLimit
                || (this.statusCode == SampleWorkflowBL.INVALID_STATUS)) {
            pageSize = this.maxSearchResultsToInclude;
        }

        // retrieve the search results
        SampleInfo samples[];

        try {
            samples = cc.getSampleManager().getSearchResults(searchId, 0,
                    pageSize);
        } catch (RemoteException ex) {
            cc.reportRemoteException(ex);
            throw new JspException(ex);
        } catch (RecipnetException ex) {
            throw new JspException(ex);
        }

        this.resultCount = samples.length;
        this.cachedSearchResults = new ArrayList<SampleInfo>(pageSize);
        for (SampleInfo si : samples) {
            if (si == null) {
                break;
            } else {
                this.cachedSearchResults.add(si);
            }
        }

        return rc;
    }

    /**
     * Implements {@code PaginationContext}; the current implementation always
     * returns 1.
     * 
     * @return 1
     */
    public int getPageNumber() {
        return 1;
    }

    /**
     * Implements {@code PaginationContext}; the current implementation returns
     * a value no greater than 'maxSearchResultsToInclude'. The value is
     * typically reflects the user's preferences except if their preferences
     * indicate a higher number of samples than 'maxSearchResultsToInclude' or
     * if 'ignorePreferredResultLimit' is set to {@code true}.
     * 
     * @return the number of samples to include
     * @throws IllegalStateException if called before the {@code FETCHING_PHASE}.
     */
    public int getPageSize() {
        if ((getPage().getPhase() == HtmlPage.REGISTRATION_PHASE)
                || (getPage().getPhase() == HtmlPage.PARSING_PHASE)) {
            throw new IllegalStateException();
        }
        return this.pageSize;
    }

    /**
     * Implements {@code PaginationContext}.
     * 
     * @return the total number of samples with provided 'statusCode' for the
     *         lab, or if no 'statusCode' was indicated, the total number of
     *         samples at the lab.
     * @throws IllegalStateException if called before the {@code FETCHING_PHASE}.
     */
    public int getElementCount() {
        if ((getPage().getPhase() == HtmlPage.REGISTRATION_PHASE)
                || (getPage().getPhase() == HtmlPage.PARSING_PHASE)) {
            throw new IllegalStateException();
        }
        return this.resultCount;
    }

    /**
     * Implements {@code PaginationContext}.
     * 
     * @return the total number of pages
     * @throws IllegalStateException if called before the {@code FETCHING_PHASE}.
     */
    public int getPageCount() {
        if ((getPage().getPhase() == HtmlPage.REGISTRATION_PHASE)
                || (getPage().getPhase() == HtmlPage.PARSING_PHASE)) {
            throw new IllegalStateException();
        }
        return (this.pageSize <= 0) ? 0
                : ((this.resultCount + (this.pageSize - 1)) / this.pageSize);
    }

    /**
     * Implements {@code SearchResultsContext} to return the specified search
     * results.
     * 
     * @throws IllegalStateException if called before the {@code FETCHING_PHASE}.
     * @throws IllegalArgumentException if the requested portion of the search
     *         results does not correspond with the range indicated by this
     *         tag's {@code PaginationContext} implementation.
     */
    public Collection<SampleInfo> getSearchResults(int startingIndex,
            int maxResults) {
        if ((getPage().getPhase() == HtmlPage.REGISTRATION_PHASE)
                || (getPage().getPhase() == HtmlPage.PARSING_PHASE)) {
            throw new IllegalStateException();
        }
        if ((startingIndex == 1) && (maxResults == this.pageSize)) {
            return this.cachedSearchResults;
        } else {
            // results aren't cached
            throw new IllegalArgumentException();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HtmlPageElement generateCopy(String newId, Map map) {
        SummarySearch dc = (SummarySearch) super.generateCopy(newId, map);

        dc.labContext = (LabContext) map.get(this.labContext);

        return dc;
    }
}
