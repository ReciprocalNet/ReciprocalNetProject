#!/bin/sh
###############################################################################
# Reciprocal Net project
# drecipnet
#
# Daemon script for the Reciprocal Net core modules.  Don't use this directly
# for normal Core startup or shutdown; the 'recipnetd' init script is for that
# purpose.
#
# 12-Jun-2002: ekoperda wrote first draft
# 16-Jul-2002: ekoperda wrote second draft
# 24-Jul-2002: ekoperda modified script to use /etc/recipnet/recipnetd.conf
# 30-Jul-2002: ekoperda modified script to handle the 'configure' option
# 30-Aug-2002: ekoperda modified script to handle the 'dbupdate' option
# 04-Sep-2002: ekoperda added more robust startup/shutdown checking
# 11-Sep-2002: ekoperda modified script to handle the 'dbrebuild' option
# 09-Oct-2002: ekoperda modified script so that daemon could run as user
#              'recipnet'
# 17-Oct-2002: ekoperda changed startup wait time from 3 seconds to 5 seconds
# 23-Oct-2002: ekoperda changed reworked the command-line options a bit, took
#              lots of code out of the 'configure' (now 'init') option
# 04-Nov-2002: ekoperda added support for the 'sync' option
# 12-Dec-2002: ekoperda fixed bug 641 whereby this script reported [FAILED]
#              oftentimes even when startup was successful
# 12-Jun-2003: ekoperda added '-ea' to JAVAOPT to enable run-time assertion
#              checking
# 01-Jul-2003: ekoperda utilized JAVA_HOME environment variable
# 17-Jul-2003: ekoperda added property java.library.path to support 
#              librecipnet_server.so
# 28-Jul-2003: nsanghvi modified script to make startup robust and to run Java 
#              code under 'recipnet' user context
# 05-Aug-2003: nsanghvi fixed bug #985 by adding logic to display a better 
#              error message if the config file is not readable
# 04-Feb-2005: ekoperda added additional detection logic for JAVA_HOME
# 16-Nov-2006: jobollin added support for the 'setpasswords' option
# 02-Jan-2008: ekoperda changed shell utilized by 'su' invocations
# 04-Jan-2008: ekoperda simplified script by moving most mode-checking to 
#              CoreLoader
###############################################################################

# Obtain all our recipnet file locations from the config file.  We use
#   the variables GenRecipnetdClassFile and DbDriverFile.
CONFFILE=/etc/recipnet/recipnetd.conf
if [ ! -r $CONFFILE ]; then
    echo "Cannot read file $CONFFILE; check file permissions."
    exit 3
fi
. $CONFFILE

# Obtain a value for JAVA_HOME
if [ -f /etc/java/java.conf ]; then
    . /etc/java/java.conf
fi
if [ -z "$JAVA_HOME" -a -d "$JVM_ROOT"/jre ]; then
    JAVA_HOME=$JVM_ROOT/jre
fi

JAVACMD="${JAVA_HOME}/bin/java"
JARCMD="${JAVA_HOME}/bin/jar"
JAVAOPT="-Djava.rmi.server.codebase=file:${GenRecipnetdClassFile} \
         -Djava.util.logging.config.file=${CONFFILE} \
	     -Djava.rmi.server.hostname=localhost \
         -Djava.library.path=/usr/lib \
         -ea \
         -server"
JAVACP="${GenRecipnetdClassFile}:${DbDriverFile}"

if [ "$1" = "start" ]; then
     # Set a trap for an inter-process signal that will be received once the
     #   core modules have started. 
     CORESTARTED=0
     trap "CORESTARTED=1" SIGUSR1 

    # Start the core modules and record their PID.  The second command-line
    #   argument describes the program that the core modules should invoke once
    #   they've finished starting up.
    ${JAVACMD} $JAVAOPT -cp "$JAVACP" \
            org.recipnet.site.core.CoreLoader run "/bin/kill -SIGUSR1 $$" \
            > /dev/null 2>&1 &    
    PID=$!

    # Wait up to 300 seconds (5 minutes) for the core modules to finish
    #   starting up.  Return control to the caller once they have, or if the
    #   core modules' process unexpectedly dies.  Poll for core modules startup
    #   and status once every second.
    SECONDSWAITED=0
    while [ $SECONDSWAITED -lt 300 ]; do
        if [ $CORESTARTED -eq 1 ]; then
            # The core modules have finished starting!
            break
        fi;
        ISRUNNING=`ps -A | grep $PID`
        if [ -z "$ISRUNNING" ]; then
            # The core modules' process has terminated unexpectedly.
            break
        fi

        # Wait one second before polling again.
        sleep 1
        let SECONDSWAITED=$SECONDSWAITED+1
    done
    if [ -z "$ISRUNNING" ]; then
        exit 1
    fi
    if [ $CORESTARTED -eq 0 ]; then
        exit 2
    fi

    # If we get here then we know the core modules started successfully.
    echo $PID > /tmp/var-run-recipnetd.pid
    exit 0

elif [ "$1" = "stop" ]; then
    # Stop the core modules, if they were 'start'ed earlier
    if [ ! -f /var/run/recipnetd.pid ]; then
	exit 2
    fi
    PID=`cat /var/run/recipnetd.pid`
    rm -f /var/run/recipnetd.pid

    # Kill the process and wait for it to stop.
    kill -15 $PID
    ISRUNNING=`ps | grep $PID`
    while [ ! -z "$ISRUNNING" ]; do
	sleep 1
	ISRUNNING=`ps | grep $PID`
    done

elif [ "$1" = "run" -o "$1" = "sync" ]; then
    # Run the core modules synchronously; will not return until they terminate.
    # We want them to run as the 'recipnet' user.
    su -s /bin/sh -c "${JAVACMD} $JAVAOPT -cp \"$JAVACP\" \
            org.recipnet.site.core.CoreLoader $@" recipnet

else
    # Assume the user has invoked any of the several utility modes offered by
    # core.  These are intended to be run only as root.
    if [ $UID -ne 0 ]; then
	echo "You must be 'root' to run this utility."
	exit 101
    fi
    su -s /bin/sh -c "${JAVACMD} $JAVAOPT -cp \"$JAVACP\" \
            org.recipnet.site.core.CoreLoader $@" recipnet
fi
